{"version":3,"file":"147.859f5a28d57187d3.js","mappings":"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","names":["EventService","constructor","this","inject","EventsApiService","NbAuthService","getEvents","eventApiService","addEvent","event","nbAuthService","getToken","pipe","switchMap","token","owner_uid","getPayload","user_id","updateEvent","removeEvent","getEvent","uid","getEventSchedules","updateEventSchedule","eventUID","schedule","addEventSchedules","factory","DAY","i0","EventListComponent","FormBuilder","NbDialogService","TeacherService","NbToastrService","teacherService","getList","formBuilder","group","colors","Validators","start_date","end_date","days","meta","type","title","teacher_uids","is_active","Object","keys","entries","map","value","calculateRows","isMobile","window","innerWidth","ngOnInit","getData","events$","eventService","openDialog","dialog","context","ref","dialogService","open","form","start","Date","end","isNaN","getTime","toastr","show","status","Timestamp","day","subscribe","complete","loading","close","error","message","console","log","deleteEvent","selectors","ctx","EventEditComponent","ActivatedRoute","ChangeDetectorRef","disabled","cdr","markForCheck","setHours","today","event$","route","paramMap","get","tap","patchValue","toString","toMillis","eventSchedules$","schedules","saveEvent","next","updateScheduleStatus","addSchedule","routes","path","redirectTo","pathMatch","component","data","EventModule","CommonModule","NbLayoutModule","NbCardModule","NbIconModule","NbInputModule","NbButtonModule","NbSelectModule","NbListModule","NbCheckboxModule","NbDatepickerModule","NbTimepickerModule","ReactiveFormsModule","SharedModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./src/app/event/services/event.service.ts","./src/app/event/utils/event.ts","./src/app/event/containers/event-list/event-list.component.html","./src/app/event/containers/event-list/event-list.component.ts","./src/app/event/containers/event-edit/event-edit.component.html","./src/app/event/containers/event-edit/event-edit.component.ts","./src/app/event/event.module.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { NbAuthService } from '@nebular/auth';\nimport { Observable, switchMap } from 'rxjs'\nimport { ICalendarEvent, IEventSchedule } from 'src/app/backend/model/event';\nimport { EventsApiService } from 'src/app/backend/services/events-api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n  private eventApiService = inject(EventsApiService);\n  private nbAuthService = inject(NbAuthService);\n\n  getEvents(): Observable<ICalendarEvent[]> {\n    return this.eventApiService.getEvents();\n  }\n\n  addEvent(event: Exclude<ICalendarEvent, 'uid' | 'created_on' | 'updated_on'>): Observable<string> {\n    return this.nbAuthService.getToken().pipe(\n      switchMap(token => {\n        event.owner_uid = token.getPayload().user_id;\n        return this.eventApiService.addEvent(event);\n      }),\n    );\n  }\n\n  updateEvent(event: Partial<ICalendarEvent>): Observable<void> {\n    return this.eventApiService.updateEvent(event);\n  }\n\n  removeEvent(event: Partial<ICalendarEvent>): Observable<void> {\n    return this.eventApiService.removeEvent(event);\n  }\n\n  getEvent(uid: string): Observable<ICalendarEvent> {\n    return this.eventApiService.getEvent(uid);\n  }\n\n  getEventSchedules(uid: string): Observable<IEventSchedule[]> {\n    return this.eventApiService.getEventSchedules(uid);\n  }\n\n  updateEventSchedule(eventUID: string, schedule: Partial<IEventSchedule>): Observable<void> {\n    return this.eventApiService.updateEventSchedule(eventUID, schedule);\n  }\n\n  addEventSchedules(eventUID: string, schedule: Pick<ICalendarEvent, 'start_date' | 'end_date' | 'days'>): Observable<string> {\n    return this.eventApiService.addEventSchedules(eventUID, schedule);\n  }\n}\n","export const DAY = {\r\n  1: 'Понедельник',\r\n  2: 'Вторник',\r\n  3: 'Среда',\r\n  4: 'Четверг',\r\n  5: 'Пятница',\r\n  6: 'Суббота',\r\n  0: 'Воскресенье',\r\n}\r\n","<nb-layout>\n  <nb-layout-column>\n    <nb-card>\n      <nb-card-header>\n        <button nbButton status=\"primary\" type=\"button\" (click)=\"openDialog(createDialog)\">Добавить</button>\n      </nb-card-header>\n      <nb-card-body>\n        <nb-list class=\"event-table\">\n          <nb-list-item class=\"event-row\">\n            <div class=\"event-cell\">UID</div>\n            <div class=\"event-cell\">Название</div>\n            <div class=\"event-cell\">Статус</div>\n            <div class=\"event-cell\">Кто</div>\n            <div class=\"event-cell\">Дата создания</div>\n            <div class=\"event-cell\">Дата обновления</div>\n            <div class=\"event-cell\">Начало события</div>\n            <div class=\"event-cell\">Окончание события</div>\n            <div class=\"event-cell\"></div>\n          </nb-list-item>\n          <nb-list-item *ngFor=\"let event of events$ | async\" class=\"event-row\">\n            <div class=\"event-cell\">{{ event.uid }}</div>\n            <div class=\"event-cell\">{{ event.title }}</div>\n            <div class=\"event-cell\">{{ event.is_active ? 'Активен' : 'Деактивирован' }}</div>\n            <div class=\"event-cell\" *ngIf=\"event.owner_uid | user | async as user; else empty\">{{ user.first_name }} {{ user.last_name }}</div>\n            <div class=\"event-cell\" *ngIf=\"event.created_on; else empty\">{{ event.created_on.toMillis() | date: 'dd MM yyyy HH:mm' }}</div>\n            <div class=\"event-cell\" *ngIf=\"event.updated_on; else empty\">{{ event.updated_on.toMillis() | date: 'dd MM yyyy HH:mm' }}</div>\n            <div class=\"event-cell\" *ngIf=\"event.start_date; else empty\">{{ event.start_date.toMillis() | date: 'dd MM yyyy HH:mm' }}</div>\n            <div class=\"event-cell\" *ngIf=\"event.end_date; else empty\">{{ event.end_date.toMillis() | date: 'dd MM yyyy HH:mm' }}</div>\n            <div class=\"event-cell\">\n              <button type=\"button\" nbButton [routerLink]=\"['../', event.uid]\"><nb-icon icon=\"edit-outline\"></nb-icon></button>\n              <button type=\"button\" nbButton (click)=\"deleteEvent(event)\"><nb-icon icon=\"trash-outline\"></nb-icon></button>\n            </div>\n          </nb-list-item>\n          <ng-template #empty>\n            <div class=\"event-cell\"></div>\n          </ng-template>\n        </nb-list>\n      </nb-card-body>\n    </nb-card>\n  </nb-layout-column>\n</nb-layout>\n\n<ng-template #createDialog let-data let-ref=\"dialogRef\">\n  <nb-card>\n    <nb-card-header>Добавить в расписание</nb-card-header>\n    <nb-card-body>\n      <form [formGroup]=\"form\">\n        <div class=\"form-group\">\n          <label for=\"title\">Название</label>\n          <input name=\"title\" nbInput formControlName=\"title\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"teacher_uids\">Преподаватели</label>\n          <nb-select multiple placeholder=\"Выберите преподавателей\" name=\"teacher_uids\"\n            [status]=\"form.get('teacher_uids')?.touched ? (form.get('teacher_uids')?.invalid  ? 'danger' : 'success') : 'basic'\"\n            formControlName=\"teacher_uids\">\n            <nb-option *ngFor=\"let user of users$ | async\" [value]=\"user.uid\">{{ user.first_name }}\n              {{user.last_name}}</nb-option>\n          </nb-select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"colors\">Цвет</label>\n          <nb-select placeholder=\"Выберите цвет\" name=\"colors\"\n            [status]=\"form.get('colors')?.touched ? (form.get('colors')?.invalid  ? 'danger' : 'success') : 'basic'\"\n            formControlName=\"colors\">\n            <nb-option *ngFor=\"let color of colorOptions\" [value]=\"color\">{{ color }}</nb-option>\n          </nb-select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"start_date\">Начало</label>\n          <ng-container *ngIf=\"!isMobile; else startDate\">\n            <input name=\"start_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\" [nbDatepicker]=\"startDatePicker\"\n              formControlName=\"start_date\">\n            <nb-date-timepicker #startDatePicker singleColumn [step]=\"30\"></nb-date-timepicker>\n          </ng-container>\n          <ng-template #startDate>\n            <input name=\"start_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\"\n              formControlName=\"start_date\">\n          </ng-template>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"end_date\">Окончание</label>\n          <ng-container *ngIf=\"!isMobile; else endDate\">\n            <input name=\"end_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\" [nbDatepicker]=\"endDatePicker\"\n              formControlName=\"end_date\">\n            <nb-date-timepicker #endDatePicker singleColumn [step]=\"30\"></nb-date-timepicker>\n          </ng-container>\n          <ng-template #endDate>\n            <input name=\"end_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\"\n              formControlName=\"end_date\">\n          </ng-template>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"days\">Дни</label>\n          <nb-select multiple placeholder=\"Выберите дни\" name=\"days\"\n            [status]=\"form.get('days')?.touched ? (form.get('days')?.invalid  ? 'danger' : 'success') : 'basic'\"\n            formControlName=\"days\">\n            <nb-option *ngFor=\"let day of dayOptions\" [value]=\"day.value\">{{ day.title }}</nb-option>\n          </nb-select>\n        </div>\n      </form>\n    </nb-card-body>\n    <nb-card-footer class=\"footer\">\n      <button nbButton (click)=\"ref.close()\">Отмена</button>\n      <button nbButton status=\"primary\" [disabled]=\"loading\" (click)=\"addEvent(form)\">Сохранить</button>\n    </nb-card-footer>\n  </nb-card>\n</ng-template>\n","import { Component, inject, TemplateRef, HostListener } from '@angular/core';\nimport { Timestamp } from '@angular/fire/firestore';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NbDialogRef, NbDialogService, NbNativeDateService, NbToastrService } from '@nebular/theme';\nimport { Observable } from 'rxjs';\nimport { colors } from 'src/app/calendar/utils/colors';\nimport { TeacherService } from 'src/app/teacher/services/teacher.service';\nimport { EventService } from '../../services/event.service';\nimport { ICalendarEvent } from 'src/app/backend/model/event';\nimport { DAY } from '../../utils/event';\n\n@Component({\n  selector: 'app-event-list',\n  templateUrl: './event-list.component.html',\n  styleUrls: ['./event-list.component.scss'],\n})\nexport class EventListComponent {\n  private formBuilder = inject(FormBuilder);\n  private dialogService = inject(NbDialogService);\n  private teacherService = inject(TeacherService);\n  private eventService = inject(EventService);\n  private toastr = inject(NbToastrService);\n\n  events$!: Observable<ICalendarEvent[]>;\n  users$ = this.teacherService.getList();\n\n  private ref!: NbDialogRef<any>;\n  form: FormGroup = this.formBuilder.group({\n    uid: [''],\n    colors: ['', Validators.required],\n    start_date: ['', Validators.required],\n    end_date: ['', Validators.required],\n    days: [[]],\n    meta: this.formBuilder.group({\n      type: ['info'],\n    }),\n    title: ['', Validators.required],\n    teacher_uids: [[], Validators.required],\n    is_active: [true, Validators.required],\n  })\n  loading = false;\n  colorOptions = Object.keys(colors);\n  dayOptions = Object.entries(DAY).map(([value, title]) => ({ value, title }));\n\n  isMobile = false;\n  @HostListener('window:resize', ['$event']) calculateRows() {\n    this.isMobile = window.innerWidth < 768;\n  }\n\n  ngOnInit(): void {\n    this.calculateRows();\n    this.getData();\n  }\n\n  getData() {\n    this.events$ = this.eventService.getEvents();\n  }\n\n  openDialog(dialog: TemplateRef<any>, context?: any) {\n    this.ref = this.dialogService.open(dialog, {\n      context,\n    });\n  }\n\n  addEvent(form: FormGroup) {\n    const start = new Date(form.value.start_date);\n    const end = new Date(form.value.end_date);\n    if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n      this.toastr.show('Неверный формат даты', 'Произошла ошибка', { status: 'danger' });\n      return;\n    }\n    form.value.start_date = Timestamp.fromDate(start);\n    form.value.end_date = Timestamp.fromDate(end);\n    form.value.days = form.value.days.map((day: string) => +day);\n    this.eventService.addEvent(form.value).subscribe({\n      complete: () => {\n        this.toastr.show('Событие добавлено', 'Данные сохранены', { status: 'success' });\n        this.loading = false;\n        this.ref.close();\n        this.getData();\n      },\n      error: (error) => {\n        this.toastr.show(error?.message, 'Произошла ошибка', { status: 'danger' });\n        console.log('error', error);\n        this.loading = false;\n      },\n    })\n  }\n\n  deleteEvent(event: ICalendarEvent) {\n    this.eventService.removeEvent({ uid: event.uid }).subscribe(() => {\n      this.toastr.show('Событие удалено', 'Данные сохранены', { status: 'success' });\n      this.getData();\n    });\n  }\n}\n","<nb-layout>\n  <nb-layout-column *ngIf=\"{event: event$ | async, eventSchedules: eventSchedules$ | async} as all\">\n    <nb-card>\n      <nb-card-body>\n        <form [formGroup]=\"form\" class=\"form\" (submit)=\"saveEvent(form)\">\n          <div class=\"form-group\">\n            <label for=\"title\">Название</label>\n            <input name=\"title\" nbInput formControlName=\"title\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"teacher_uids\">Преподаватели</label>\n            <nb-select multiple placeholder=\"Выберите преподавателей\" name=\"teacher_uids\"\n              [status]=\"form.get('teacher_uids')?.touched ? (form.get('teacher_uids')?.invalid  ? 'danger' : 'success') : 'basic'\"\n              formControlName=\"teacher_uids\">\n              <nb-option *ngFor=\"let user of users$ | async\" [value]=\"user.uid\">{{ user.first_name }}\n                {{user.last_name}}</nb-option>\n            </nb-select>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"start_date\">Начало</label>\n            <ng-container *ngIf=\"!isMobile; else startDate\">\n              <input name=\"start_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\" [nbDatepicker]=\"startDatePicker\"\n                formControlName=\"start_date\">\n              <nb-date-timepicker #startDatePicker singleColumn [step]=\"30\"></nb-date-timepicker>\n            </ng-container>\n            <ng-template #startDate>\n              <input name=\"start_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\"\n                formControlName=\"start_date\">\n            </ng-template>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"end_date\">Окончание</label>\n            <ng-container *ngIf=\"!isMobile; else endDate\">\n              <input name=\"end_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\" [nbDatepicker]=\"endDatePicker\"\n                formControlName=\"end_date\">\n              <nb-date-timepicker #endDatePicker singleColumn [step]=\"30\"></nb-date-timepicker>\n            </ng-container>\n            <ng-template #endDate>\n              <input name=\"end_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\"\n                formControlName=\"end_date\">\n            </ng-template>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"colors\">Цвет</label>\n            <nb-select placeholder=\"Выберите цвет\" name=\"colors\"\n              [status]=\"form.get('colors')?.touched ? (form.get('colors')?.invalid  ? 'danger' : 'success') : 'basic'\"\n              formControlName=\"colors\">\n              <nb-option *ngFor=\"let color of colorOptions\" [value]=\"color\">{{ color }}</nb-option>\n            </nb-select>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"colors\">Статус</label>\n            <nb-checkbox formControlName=\"is_active\">Активен</nb-checkbox>\n          </div>\n          <button nbButton status=\"primary\" type=\"submit\" class=\"event-button\" [disabled]=\"loading\">Сохранить</button>\n        </form>\n        <nb-list class=\"event-table\">\n          <nb-list-item class=\"event-row\">\n            <h4>Расписание</h4>\n            <button nbButton status=\"primary\" outline type=\"button\" class=\"event-button\" (click)=\"openDialog(scheduleDialog)\">Добавить</button>\n          </nb-list-item>\n          <nb-list-item class=\"event-row\">\n            <div class=\"event-cell\">Дата начала</div>\n            <div class=\"event-cell\">Дата окончания</div>\n            <div class=\"event-cell\">Статус</div>\n            <div class=\"event-cell\"></div>\n          </nb-list-item>\n          <nb-list-item *ngFor=\"let schedule of eventSchedules$ | async\" class=\"event-row\">\n            <div class=\"event-cell\" *ngIf=\"schedule.start_date; else empty\">{{ schedule.start_date.toMillis() | date: 'dd.MM.yyyy HH:mm' }}</div>\n            <div class=\"event-cell\" *ngIf=\"schedule.end_date; else empty\">{{ schedule.end_date.toMillis() | date: 'dd.MM.yyyy HH:mm' }}</div>\n            <div class=\"event-cell\">\n              {{ schedule.is_active ? 'Активен' : 'Деактивирован' }}\n              {{ schedule.start_date.toMillis() > today[0]  && schedule.start_date.toMillis() < today[1] ? '(Сегодня)' : '' }}\n            </div>\n            <div class=\"event-cell\">\n              <button type=\"button\" *ngIf=\"!schedule.is_active\" [disabled]=\"loading\" nbButton (click)=\"updateScheduleStatus(form.value.uid, schedule, true)\"><nb-icon icon=\"edit-outline\"></nb-icon></button>\n              <button type=\"button\" *ngIf=\"schedule.is_active\" [disabled]=\"loading\" nbButton (click)=\"updateScheduleStatus(form.value.uid, schedule, false)\"><nb-icon icon=\"trash-outline\"></nb-icon></button>\n            </div>\n          </nb-list-item>\n          <ng-template #empty>\n            <div class=\"event-cell\"></div>\n          </ng-template>\n        </nb-list>\n      </nb-card-body>\n    </nb-card>\n  </nb-layout-column>\n</nb-layout>\n\n<ng-template #scheduleDialog let-data let-ref=\"dialogRef\">\n  <nb-card>\n    <nb-card-header>Добавить в расписание</nb-card-header>\n    <nb-card-body>\n      <form [formGroup]=\"scheduleForm\">\n        <div class=\"form-group\">\n          <label for=\"start_date\">Начало</label>\n          <ng-container *ngIf=\"!isMobile; else startDate\">\n            <input name=\"start_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\" [nbDatepicker]=\"startDatePicker\"\n              formControlName=\"start_date\">\n            <nb-date-timepicker #startDatePicker singleColumn [step]=\"30\"></nb-date-timepicker>\n          </ng-container>\n          <ng-template #startDate>\n            <input name=\"start_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\"\n              formControlName=\"start_date\">\n          </ng-template>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"end_date\">Окончание</label>\n          <ng-container *ngIf=\"!isMobile; else endDate\">\n            <input name=\"end_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\" [nbDatepicker]=\"endDatePicker\"\n              formControlName=\"end_date\">\n            <nb-date-timepicker #endDatePicker singleColumn [step]=\"30\"></nb-date-timepicker>\n          </ng-container>\n          <ng-template #endDate>\n            <input name=\"end_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\"\n              formControlName=\"end_date\">\n          </ng-template>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"days\">Дни</label>\n          <nb-select multiple placeholder=\"Выберите дни\" name=\"days\"\n            [status]=\"form.get('days')?.touched ? (form.get('days')?.invalid  ? 'danger' : 'success') : 'basic'\"\n            formControlName=\"days\">\n            <nb-option *ngFor=\"let day of dayOptions\" [value]=\"day.value\">{{ day.title }}</nb-option>\n          </nb-select>\n        </div>\n      </form>\n    </nb-card-body>\n    <nb-card-footer class=\"footer\">\n      <button nbButton (click)=\"ref.close()\">Отмена</button>\n      <button nbButton status=\"primary\" [disabled]=\"loading\" (click)=\"addSchedule(form.value.uid, scheduleForm)\">Сохранить</button>\n    </nb-card-footer>\n  </nb-card>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, inject, ChangeDetectorRef, HostListener, TemplateRef } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { colors } from 'src/app/calendar/utils/colors';\nimport { DAY } from '../../utils/event';\nimport { ICalendarEvent, IEventSchedule } from 'src/app/backend/model/event';\nimport { EventService } from '../../services/event.service';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Observable, switchMap, tap } from 'rxjs';\nimport { TeacherService } from 'src/app/teacher/services/teacher.service';\nimport { NbDialogRef, NbDialogService, NbToastrService } from '@nebular/theme';\nimport { Timestamp } from '@angular/fire/firestore';\n\n@Component({\n  selector: 'app-event-edit',\n  templateUrl: './event-edit.component.html',\n  styleUrls: ['./event-edit.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class EventEditComponent {\n  private formBuilder = inject(FormBuilder);\n  private eventService = inject(EventService);\n  private route = inject(ActivatedRoute);\n  private cdr = inject(ChangeDetectorRef);\n  private teacherService = inject(TeacherService);\n  private toastr = inject(NbToastrService);\n  private dialogService = inject(NbDialogService);\n  loading = false;\n\n  event$!: Observable<ICalendarEvent>;\n  eventSchedules$!: Observable<IEventSchedule[]>;\n  users$ = this.teacherService.getList();\n\n  form: FormGroup = this.formBuilder.group({\n    uid: ['', Validators.required],\n    colors: ['', Validators.required],\n    start_date: [{ value: '', disabled: true }, Validators.required],\n    end_date: [{ value: '', disabled: true }, Validators.required],\n    meta: this.formBuilder.group({\n      type: ['info'],\n    }),\n    title: ['', Validators.required],\n    teacher_uids: [[], Validators.required],\n    is_active: [false, Validators.required],\n  });\n\n  scheduleForm: FormGroup = this.formBuilder.group({\n    uid: ['', Validators.required],\n    start_date: ['', Validators.required],\n    end_date: ['', Validators.required],\n    days: [[], Validators.required],\n  });\n\n  colorOptions = Object.keys(colors);\n  dayOptions = Object.entries(DAY).map(([value, title]) => ({ value, title }));\n  isMobile = false;\n  today!: number[];\n  private ref!: NbDialogRef<any>;\n\n  @HostListener('window:resize', ['$event']) calculateRows() {\n    this.isMobile = window.innerWidth < 768;\n    this.cdr.markForCheck();\n  }\n\n  ngOnInit(): void {\n    this.calculateRows();\n    this.getData();\n    const start_date = new Date();\n    const end_date = new Date();\n    start_date.setHours(0, 0, 0);\n    end_date.setHours(23, 59, 59);\n    this.today = [start_date.getTime(), end_date.getTime()];\n    console.log(this.today)\n    this.cdr.markForCheck();\n  }\n\n  getData() {\n    this.event$ = this.route.paramMap.pipe(\n      switchMap((paramMap: ParamMap) => this.eventService.getEvent(paramMap.get('id') ?? '')),\n      tap(event => {\n        this.form.patchValue({\n          ...event,\n          days: [...event.days.map(day => day.toString())],\n          start_date: new Date(event.start_date.toMillis()),\n          end_date: new Date(event.end_date.toMillis()),\n        });\n      })\n    );\n    this.eventSchedules$ = this.route.paramMap.pipe(\n      switchMap((paramMap: ParamMap) => this.eventService.getEventSchedules(paramMap.get('id') ?? '')),\n      tap(schedules => {\n        console.log(schedules);\n      })\n    );\n  }\n\n  openDialog(dialog: TemplateRef<any>, context?: any) {\n    this.ref = this.dialogService.open(dialog, {\n      context,\n    });\n  }\n\n  saveEvent(form: FormGroup) {\n    this.loading = true;\n    this.eventService.updateEvent(form.value).subscribe({\n      next: () => {\n        this.toastr.show('Событие обновлено', 'Данные сохранены', { status: 'success' });\n        this.loading = false;\n        this.cdr.markForCheck();\n        this.getData();\n      },\n      error: (error) => {\n        this.toastr.show(error?.message, 'Произошла ошибка', { status: 'error' });\n        console.log('error', error);\n        this.loading = false;\n        this.cdr.markForCheck();\n      },\n    })\n  }\n\n  updateScheduleStatus(eventUID: string, schedule: Partial<IEventSchedule>, is_active: boolean) {\n    this.loading = true;\n    this.eventService.updateEventSchedule(eventUID, { uid: schedule.uid, is_active }).subscribe({\n      next: () => {\n        this.toastr.show('Расписание обновлено', 'Данные сохранены', { status: 'success' });\n        this.loading = false;\n        this.cdr.markForCheck();\n        this.getData();\n      },\n      error: (error) => {\n        this.toastr.show(error?.message, 'Произошла ошибка', { status: 'error' });\n        console.log('error', error);\n        this.loading = false;\n        this.cdr.markForCheck();\n      },\n    })\n  }\n\n  addSchedule(eventUID: string, form: FormGroup) {\n    this.loading = true;\n    this.eventService.addEventSchedules(eventUID, {\n      start_date: Timestamp.fromDate(form.value.start_date),\n      end_date: Timestamp.fromDate(form.value.end_date),\n      days: form.value.days.map((day: string) => +day),\n    }).subscribe({\n      next: () => {\n        this.toastr.show('Расписание обновлено', 'Данные сохранены', { status: 'success' });\n        this.loading = false;\n        this.cdr.markForCheck();\n        this.ref.close();\n        this.getData();\n      },\n      error: (error) => {\n        this.toastr.show(error?.message, 'Произошла ошибка', { status: 'error' });\n        console.log('error', error);\n        this.loading = false;\n        this.cdr.markForCheck();\n      },\n    })\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EventListComponent } from './containers/event-list/event-list.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NbButtonModule, NbCardModule, NbCheckboxModule, NbDatepickerModule, NbIconModule, NbInputModule, NbLayoutModule, NbListModule, NbNativeDateService, NbSelectModule, NbTimepickerModule } from '@nebular/theme';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '../shared/shared.module';\nimport { EventEditComponent } from './containers/event-edit/event-edit.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'list',\n    pathMatch: 'full',\n  },\n  {\n    path: 'list',\n    component: EventListComponent,\n    data: {\n      title: 'События',\n    }\n  },\n  {\n    path: ':id',\n    component: EventEditComponent,\n    data: {\n      title: 'Редактирование',\n    }\n  },\n];\n\n@NgModule({\n  declarations: [\n    EventListComponent,\n    EventEditComponent,\n  ],\n  imports: [\n    CommonModule,\n    NbLayoutModule,\n    NbCardModule,\n    NbIconModule,\n    NbInputModule,\n    NbButtonModule,\n    NbSelectModule,\n    NbListModule,\n    NbCheckboxModule,\n    NbDatepickerModule,\n    NbTimepickerModule,\n    ReactiveFormsModule,\n    SharedModule,\n    RouterModule.forChild(routes),\n  ],\n})\nexport class EventModule { }\n"],"x_google_ignoreList":[]}