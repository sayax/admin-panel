{"version":3,"file":"537.b0a12282c2f5f2a6.js","mappings":"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","names":["TeacherApiService","constructor","this","inject","Firestore","collection","firestore","Collection","UserApiService","getTeachers","teacherQuery","query","teacherCollection","where","from","getDocs","pipe","switchMap","data","teacherData","docs","map","doc","teacherObject","reduce","prev","current","uid","user_uids","userApiService","getUsersInList","users","user","phone","email","first_name","middle_name","last_name","avatar_url","avatar_urls","start_date","styles","level","getTeacher","ref","getDoc","teacher","getUser","addTeacher","updated_on","Timestamp","exists","updateDoc","created_on","setDoc","updateUser","is_teacher","removeTeacher","end_date","is_active","factory","TeacherService","getList","teacherApiService","getUsers","getUsersNotTeachers","DanceStyle","DanceLevel","i0","TeacherListComponent","NbDialogService","FormBuilder","NbToastrService","ChangeDetectorRef","value","title","formBuilder","group","Validators","ngOnInit","getData","list$","teacherService","users$","openDialog","dialog","dialogService","open","form","subscribe","complete","toastr","show","status","loading","close","cdr","markForCheck","error","message","console","log","selectors","TeacherListModule","CommonModule","NbListModule","NbCardModule","NbUserModule","NbButtonModule","NbSelectModule","NbInputModule","NbIconModule","NbTooltipModule","ReactiveFormsModule","NbDialogModule","SharedModule","RouterModule","path","component"],"sourceRoot":"webpack:///","sources":["./src/app/backend/services/teacher-api.service.ts","./src/app/teacher/services/teacher.service.ts","./src/app/backend/model/teacher.ts","./src/app/teacher/containers/teacher-list/teacher-list.component.html","./src/app/teacher/containers/teacher-list/teacher-list.component.ts","./src/app/teacher/containers/teacher-list/teacher-list.module.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { Firestore, Timestamp, collection, doc, getDoc, getDocs, query, setDoc, updateDoc, where } from '@angular/fire/firestore';\nimport { Observable, from, map, switchMap } from 'rxjs';\nimport { Teacher, TeacherDTO } from '../model/teacher';\nimport { Collection } from '../model/collections';\nimport { UserApiService } from './user-api.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TeacherApiService {\n  private firestore: Firestore = inject(Firestore);\n  private teacherCollection = collection(this.firestore, Collection.TEACHER);\n  private userApiService = inject(UserApiService);\n\n  getTeachers(): Observable<TeacherDTO[]> {\n    const teacherQuery = query(this.teacherCollection, where('is_active', '==', true));\n    const teacherSnapshot = from(getDocs(teacherQuery));\n    return teacherSnapshot.pipe(\n      switchMap(data => {\n        const teacherData = data.docs.map(doc => doc.data() as Teacher);\n        const teacherObject: {[key: string]: Teacher} = teacherData.reduce((prev, current) => ({\n          ...prev,\n          [current.uid]: current,\n        }), {});\n        const user_uids = teacherData.map(doc => doc.uid);\n        return this.userApiService.getUsersInList(user_uids).pipe(\n          map(users => {\n            return users.map(user => {\n              const consolidated: TeacherDTO = {\n                uid: teacherObject[user.uid].uid,\n                phone: user.phone,\n                email: user.email,\n                first_name: user.first_name,\n                middle_name: user.middle_name,\n                last_name: user.last_name,\n                avatar_url: user.avatar_urls ? user.avatar_urls[0] : '',\n                start_date: teacherObject[user.uid].start_date,\n                styles: teacherObject[user.uid].styles,\n                level: teacherObject[user.uid].level,\n              };\n              return consolidated;\n            })\n          })\n        )\n      })\n    )\n  }\n\n  getTeacher(uid: string): Observable<TeacherDTO> {\n    const ref = doc(this.teacherCollection, uid);\n    return from(getDoc(ref)).pipe(\n      map(data => data.data() as Teacher),\n      switchMap(teacher => {\n        return this.userApiService.getUser(teacher.uid).pipe(\n          map(user => ({\n            uid: teacher.uid,\n            phone: user.phone,\n            email: user.email,\n            first_name: user.first_name,\n            middle_name: user.middle_name,\n            last_name: user.last_name,\n            avatar_url: user.avatar_urls[0],\n            start_date: teacher.start_date,\n            styles: teacher.styles,\n            level: teacher.level,\n          }))\n        )\n      })\n    )\n  }\n\n  addTeacher(teacher: Partial<Teacher>): Observable<void> {\n    const ref = doc(this.teacherCollection, teacher.uid);\n    return from(getDoc(ref)).pipe(\n      switchMap(doc => {\n        teacher.updated_on = Timestamp.now();\n        teacher.start_date = Timestamp.now();\n        if (doc.exists()) {\n          return from(updateDoc(ref, teacher))\n        }\n        teacher.created_on = Timestamp.now();\n        return from(setDoc(ref, teacher))\n      }),\n      switchMap(() => this.userApiService.updateUser({\n        uid: teacher.uid,\n        is_teacher: true,\n      })),\n    )\n  }\n\n  removeTeacher(teacher: Partial<Teacher>): Observable<void> {\n    const ref = doc(this.teacherCollection, teacher.uid);\n    teacher.updated_on = Timestamp.now();\n    teacher.end_date = Timestamp.now();\n    return from(updateDoc(ref, {\n      uid: teacher.uid,\n      is_active: false,\n      updated_on: teacher.updated_on,\n      end_date: teacher.end_date,\n    })).pipe(\n      switchMap(() => this.userApiService.updateUser({\n        uid: teacher.uid,\n        is_teacher: false,\n      })),\n    );\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProfileDTO } from 'src/app/backend/model/profile';\nimport { Teacher, TeacherDTO } from 'src/app/backend/model/teacher';\nimport { TeacherApiService } from 'src/app/backend/services/teacher-api.service';\nimport { UserApiService } from 'src/app/backend/services/user-api.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TeacherService {\n  private teacherApiService = inject(TeacherApiService);\n  private userApiService = inject(UserApiService);\n\n  getList(): Observable<TeacherDTO[]> {\n    return this.teacherApiService.getTeachers();\n  }\n\n  getUsers(): Observable<ProfileDTO[]> {\n    return this.userApiService.getUsersNotTeachers();\n  }\n\n  addTeacher(teacher: Partial<Teacher>): Observable<void> {\n    return this.teacherApiService.addTeacher(teacher);\n  }\n\n  removeTeacher(teacher: Partial<Teacher>): Observable<void> {\n    return this.teacherApiService.removeTeacher(teacher);\n  }\n}\n","import { Timestamp } from \"@angular/fire/firestore\";\r\n\r\nexport interface Teacher {\r\n  created_on: Timestamp;\r\n  updated_on: Timestamp;\r\n  start_date: Timestamp;\r\n  end_date?: Timestamp;\r\n  level: string;\r\n  uid: string; // profile uid\r\n  is_active: boolean;\r\n  styles: DanceStyle[];\r\n}\r\n\r\nexport interface TeacherDTO {\r\n  uid: string;\r\n  phone: string;\r\n  email: string;\r\n  first_name: string;\r\n  middle_name?: string;\r\n  last_name: string;\r\n  avatar_url: string;\r\n  start_date: Timestamp;\r\n  level: string;\r\n  styles: DanceStyle[];\r\n}\r\n\r\nexport enum DanceStyle {\r\n  kizomba = 'kizomba',\r\n  salsa = 'salsa',\r\n  bachata = 'bachata',\r\n}\r\n\r\nexport enum DanceLevel {\r\n  beginner = 'beginner',\r\n  intermediate = 'intermediate',\r\n  advanced = 'advanced',\r\n  pro = 'pro',\r\n}\r\n","<nb-card size=\"large\">\n  <nb-card-header>\n    <button nbButton status=\"primary\" type=\"button\" (click)=\"openDialog(dialog)\">Добавить преподавателя</button>\n  </nb-card-header>\n  <nb-card-body>\n    <ng-container *ngIf=\"list$ | async as list\">\n      <nb-list *ngIf=\"list.length; else noTeachers\">\n        <nb-list-item *ngFor=\"let teacher of list\">\n          <nb-user [picture]=\"(teacher.avatar_url | mediaUrl | async) || ''\" [name]=\"teacher.first_name + ' ' + teacher.last_name\" [title]=\"teacher.level + ' преподаватель'\">\n          </nb-user>\n          <button nbButton type=\"button\" class=\"teacher-delete-button\" [disabled]=\"loading\" nbTooltip=\"Удалить преподавателя\" nbTooltipStatus=\"primary\" (click)=\"removeTeacher(teacher)\">\n            <nb-icon icon=\"trash-outline\"></nb-icon>\n          </button>\n        </nb-list-item>\n      </nb-list>\n    </ng-container>\n    <ng-template #noTeachers>\n      <p>Добавьте преподавателей</p>\n    </ng-template>\n  </nb-card-body>\n</nb-card>\n<ng-template #dialog let-data let-ref=\"dialogRef\">\n  <nb-card>\n    <nb-card-header>Добавить преподавателя</nb-card-header>\n    <nb-card-body>\n      <form [formGroup]=\"form\">\n        <div class=\"form-group\">\n          <label for=\"uid\">Пользователь</label>\n          <nb-select placeholder=\"Выберите пользователя\" name=\"uid\" [status]=\"form.get('uid')?.touched ? (form.get('uid')?.invalid  ? 'danger' : 'success') : 'basic'\" formControlName=\"uid\">\n            <nb-option *ngFor=\"let user of users$ | async\" [value]=\"user.uid\">{{ user.first_name }} {{user.last_name}}</nb-option>\n          </nb-select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"styles\">Стили</label>\n          <nb-select multiple placeholder=\"Выберите стили\" name=\"styles\" [status]=\"form.get('styles')?.touched ? (form.get('styles')?.invalid  ? 'danger' : 'success') : 'basic'\" formControlName=\"styles\">\n            <nb-option *ngFor=\"let style of styles\" [value]=\"style.value\">{{ style.title }}</nb-option>\n          </nb-select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"level\">Уровень</label>\n          <nb-select placeholder=\"Выберите уровень\" name=\"level\" [status]=\"form.get('level')?.touched ? (form.get('level')?.invalid  ? 'danger' : 'success') : 'basic'\" formControlName=\"level\">\n            <nb-option *ngFor=\"let level of levels\" [value]=\"level.value\">{{ level.title }}</nb-option>\n          </nb-select>\n        </div>\n      </form>\n    </nb-card-body>\n    <nb-card-footer>\n      <button nbButton (click)=\"ref.close()\">Отмена</button>\n      <button nbButton status=\"primary\" [disabled]=\"loading\" (click)=\"addTeacher(form)\">Сохранить</button>\n    </nb-card-footer>\n  </nb-card>\n</ng-template>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, TemplateRef, inject, OnInit } from '@angular/core';\nimport { TeacherService } from '../../services/teacher.service';\nimport { NbDialogRef, NbDialogService, NbToastrService } from '@nebular/theme';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { DanceLevel, DanceStyle, Teacher, TeacherDTO } from 'src/app/backend/model/teacher';\nimport { ProfileDTO } from 'src/app/backend/model/profile';\n\n@Component({\n  selector: 'app-teacher-list',\n  templateUrl: './teacher-list.component.html',\n  styleUrls: ['./teacher-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TeacherListComponent implements OnInit {\n  private teacherService = inject(TeacherService);\n  private dialogService = inject(NbDialogService);\n  private formBuilder = inject(FormBuilder);\n  private toastr = inject(NbToastrService);\n  private cdr = inject(ChangeDetectorRef);\n  loading = false;\n\n  styles = [\n    {\n      value: DanceStyle.kizomba,\n      title: 'Кизомба',\n    },\n    {\n      value: DanceStyle.salsa,\n      title: 'Сальса',\n    },\n    {\n      value: DanceStyle.bachata,\n      title: 'Бачата',\n    },\n  ]\n\n  levels = [\n    {\n      value: DanceLevel.beginner,\n      title: 'Начинающий',\n    },\n    {\n      value: DanceLevel.intermediate,\n      title: 'Средний',\n    },\n    {\n      value: DanceLevel.advanced,\n      title: 'Высокий',\n    },\n    {\n      value: DanceLevel.pro,\n      title: 'Профи',\n    },\n  ]\n\n  list$!: Observable<TeacherDTO[]>;\n  users$!: Observable<ProfileDTO[]>;\n  private ref!: NbDialogRef<any>;\n\n  form: FormGroup = this.formBuilder.group({\n    uid: [null, Validators.required],\n    is_active: [true],\n    styles: [null],\n    level: ['', Validators.required],\n  })\n\n  ngOnInit(): void {\n    this.getData();\n  }\n\n  getData() {\n    this.list$ = this.teacherService.getList();\n    this.users$ = this.teacherService.getUsers();\n  }\n\n  openDialog(dialog: TemplateRef<any>) {\n    this.ref = this.dialogService.open(dialog);\n  }\n\n  addTeacher(form: FormGroup) {\n    this.teacherService.addTeacher(form.value).subscribe({\n\n      complete: () => {\n        this.toastr.show('Преподаватель добавлен', 'Данные сохранены', { status: 'success' });\n        this.loading = false;\n        this.ref.close();\n        this.cdr.markForCheck();\n        this.getData();\n      },\n      error: (error) => {\n        this.toastr.show(error?.message, 'Произошла ошибка', { status: 'error' });\n        console.log('error', error);\n        this.loading = false;\n        this.cdr.markForCheck();\n      },\n    })\n  }\n\n  removeTeacher(teacher: TeacherDTO) {\n    this.teacherService.removeTeacher({\n      uid: teacher.uid,\n    }).subscribe({\n      complete: () => {\n        this.toastr.show('Преподаватель удален', 'Данные сохранены', { status: 'success' });\n        this.loading = false;\n        this.cdr.markForCheck();\n        this.getData();\n      },\n      error: (error) => {\n        this.toastr.show(error?.message, 'Произошла ошибка', { status: 'error' });\n        console.log('error', error);\n        this.loading = false;\n        this.cdr.markForCheck();\n      },\n    })\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TeacherListComponent } from './teacher-list.component';\nimport { RouterModule } from '@angular/router';\nimport { NbButtonModule, NbCardModule, NbDialogModule, NbIconModule, NbInputModule, NbListModule, NbSelectModule, NbTooltipModule, NbUserModule } from '@nebular/theme';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n\n@NgModule({\n  declarations: [\n    TeacherListComponent\n  ],\n  imports: [\n    CommonModule,\n    NbListModule,\n    NbCardModule,\n    NbUserModule,\n    NbButtonModule,\n    NbSelectModule,\n    NbInputModule,\n    NbIconModule,\n    NbTooltipModule,\n    ReactiveFormsModule,\n    NbDialogModule.forChild(),\n    SharedModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: TeacherListComponent,\n        data: {\n          title: 'Список преподавателей',\n        }\n      },\n    ]),\n  ]\n})\nexport class TeacherListModule { }\n"],"x_google_ignoreList":[]}