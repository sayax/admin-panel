{"version":3,"file":"430.c85e7a59a535f9bd.js","mappings":"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","names":["EventsService","constructor","this","inject","Firestore","collection","firestore","Collection","getEvents","usersQuery","query","eventsCollection","where","from","getDocs","pipe","map","data","docs","doc","addEvent","event","created_on","Timestamp","updated_on","is_active","addDoc","switchMap","updateEvent","uid","id","throwError","Error","ref","getDoc","exists","updateDoc","setDoc","removeEvent","factory","colors","red","primary","secondary","blue","yellow","CalendarService","UserApiService","NbAuthService","eventApiService","events","sort","a","b","start_date","toMillis","convertEventToCalendar","nbAuthService","getToken","token","owner_uid","getPayload","user_id","convertCalendarToEvent","getUsersByIds","uids","userApiService","getUsersInList","start","Date","end","end_date","undefined","title","color","allDay","cssClass","meta","teacher_uids","DateFormatterService","CalendarDateFormatter","monthViewColumnHeader","date","locale","formatDate","dayViewHour","weekViewHour","console","log","t","CustomEventTitleFormatter","CalendarEventTitleFormatter","super","month","week","day","core","LOCALE_ID","CalendarHeaderComponent","EventEmitter","CalendarView","selectors","i0","ctx","UserPipe","transform","value","getUser","of","pure","CalendarComponent","TeacherService","NbDialogService","NbToastrService","FormBuilder","Object","values","label","a11yLabel","onClick","deleteEvent","keys","formBuilder","group","Validators","type","calculateRows","window","innerWidth","view","ngOnInit","getData","events$","calendarService","actions","users$","teacherService","getList","subscribe","toastr","show","status","selectView","openDialog","dialog","context","dialogService","open","form","complete","loading","close","error","message","dayClicked","isSameMonth","viewDate","isSameDay","activeDayIsOpen","length","provide","useClass","decls","AppCalendarModule","CommonModule","CalendarModule","NbCardModule","NbButtonModule","NbSelectModule","NbCheckboxModule","NbIconModule","NbInputModule","NbListModule","NbDatepickerModule","ReactiveFormsModule","SharedModule","RouterModule","path","component"],"sourceRoot":"webpack:///","sources":["./src/app/backend/services/events.service.ts","./src/app/calendar/utils/colors.ts","./src/app/calendar/services/calendar.service.ts","./src/app/calendar/services/date-formatter.service.ts","./src/app/calendar/components/calendar-header/calendar-header.component.ts","./src/app/calendar/components/calendar-header/calendar-header.component.html","./src/app/shared/pipes/user.pipe.ts","./src/app/calendar/containers/calendar/calendar.component.html","./src/app/calendar/containers/calendar/calendar.component.ts","./src/app/calendar/calendar.module.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { Firestore, Timestamp, addDoc, collection, doc, getDoc, getDocs, query, setDoc, updateDoc, where } from '@angular/fire/firestore';\nimport { Collection } from '../model/collections';\nimport { Observable, from, map, switchMap, throwError } from 'rxjs';\nimport { ICalendarEvent } from '../model/event';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventsService {\n  private firestore: Firestore = inject(Firestore);\n  private eventsCollection = collection(this.firestore, Collection.EVENTS);\n\n  getEvents(): Observable<ICalendarEvent[]> {\n    const usersQuery = query(this.eventsCollection, where('is_active', '==', true));\n    return from(getDocs(usersQuery)).pipe(\n      map(data => data.docs.map(doc => doc.data() as ICalendarEvent)),\n    )\n  }\n\n  addEvent(event: Partial<ICalendarEvent>): Observable<string> {\n    if (!event) {\n      return throwError(() => new Error('Event is missing'));\n    }\n    event.created_on = Timestamp.now();\n    event.updated_on = Timestamp.now();\n    event.is_active = true;\n    return from(addDoc(this.eventsCollection, event)).pipe(\n      switchMap(doc => this.updateEvent({ uid: doc.id }).pipe(\n        map(() => doc.id),\n      ))\n    );\n  }\n\n  updateEvent(event: Partial<ICalendarEvent>): Observable<void> {\n    if (!event.uid) {\n      return throwError(() => new Error('ID is missing'));\n    }\n    const ref = doc(this.eventsCollection, event.uid);\n    return from(getDoc(ref)).pipe(\n      switchMap(doc => {\n        event.updated_on = Timestamp.now();\n        if (doc.exists()) {\n          return from(updateDoc(ref, event))\n        }\n        event.created_on = Timestamp.now();\n        return from(setDoc(ref, event))\n      }),\n    )\n  }\n\n  removeEvent(event: Partial<ICalendarEvent>): Observable<void> {\n    const ref = doc(this.eventsCollection, event.uid);\n    event.updated_on = Timestamp.now();\n    return from(updateDoc(ref, {\n      is_active: false,\n      updated_on: event.updated_on,\n    }));\n  }\n}\n","export const colors = {\r\n  red: {\r\n    primary: '#ad2121',\r\n    secondary: '#FAE3E3',\r\n  },\r\n  blue: {\r\n    primary: '#1e90ff',\r\n    secondary: '#D1E8FF',\r\n  },\r\n  yellow: {\r\n    primary: '#e3bc08',\r\n    secondary: '#FDF1BA',\r\n  },\r\n}\r\n","import { Injectable, inject } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\nimport { Observable, map, switchMap } from 'rxjs';\nimport { ICalendarEvent } from 'src/app/backend/model/event';\nimport { EventsService } from 'src/app/backend/services/events.service';\nimport { colors } from '../utils/colors';\nimport { Timestamp } from '@angular/fire/firestore';\nimport { NbAuthService } from '@nebular/auth';\nimport { UserApiService } from 'src/app/backend/services/user-api.service';\nimport { ProfileDTO } from 'src/app/backend/model/profile';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CalendarService {\n  private eventApiService = inject(EventsService);\n  private userApiService = inject(UserApiService);\n  private nbAuthService = inject(NbAuthService);\n\n  getEvents(): Observable<CalendarEvent[]> {\n    return this.eventApiService.getEvents().pipe(\n      map(events => events.sort((a, b) => a.start_date.toMillis() > b.start_date.toMillis() ? 1 : -1).map(event => this.convertEventToCalendar(event))),\n    );\n  }\n\n  addEvent(event: Partial<ICalendarEvent>): Observable<string> {\n    return this.nbAuthService.getToken().pipe(\n      switchMap(token => {\n        event.owner_uid = token.getPayload().user_id;\n        return this.eventApiService.addEvent(event);\n      }),\n    );\n  }\n\n  updateEvent(event: CalendarEvent): Observable<void> {\n    return this.eventApiService.updateEvent(this.convertCalendarToEvent(event));\n  }\n\n  removeEvent(event: Partial<ICalendarEvent>): Observable<void> {\n    return this.eventApiService.removeEvent(event);\n  }\n\n  getUsersByIds(uids: string[]): Observable<ProfileDTO[]> {\n    return this.userApiService.getUsersInList(uids);\n  }\n\n  private convertEventToCalendar(event: ICalendarEvent): CalendarEvent {\n    return {\n      id: event.uid,\n      start: new Date(event.start_date.toMillis()),\n      end: event.end_date ? new Date(event.end_date.toMillis()) : undefined,\n      title: event.title,\n      color: colors[event.colors],\n      allDay: event.allDay,\n      cssClass: event.cssClass,\n      meta: {\n        ...event.meta,\n        teacher_uids: event.teacher_uids,\n      },\n    }\n  }\n\n  private convertCalendarToEvent(event: CalendarEvent): Partial<ICalendarEvent> {\n    return {\n      uid: `${event.id ?? ''}`,\n      start_date: Timestamp.fromDate(event.start),\n      end_date: event.end ? Timestamp.fromDate(event.end) : undefined,\n      title: event.title,\n      allDay: event.allDay,\n      cssClass: event.cssClass,\n      meta: event.meta,\n    }\n  }\n}\n","import { formatDate } from '@angular/common';\nimport { Injectable, Inject, LOCALE_ID } from '@angular/core';\nimport { CalendarDateFormatter, CalendarEvent, CalendarEventTitleFormatter, DateFormatterParams } from 'angular-calendar';\n\n@Injectable()\nexport class DateFormatterService extends CalendarDateFormatter {\n  public override monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'EEEE', 'en');\n  }\n\n  public override dayViewHour({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'HH:mm', 'en');\n  }\n\n  public override weekViewHour({ date, locale }: DateFormatterParams): string {\n    console.log(date, locale)\n    return this.dayViewHour({ date, locale });\n  }\n}\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n  constructor(@Inject(LOCALE_ID) private locale: string) {\n    super();\n  }\n\n  // you can override any of the methods defined in the parent class\n\n  override month(event: CalendarEvent): string {\n    return `<b>${formatDate(event.start, 'HH:mm', this.locale)}</b> ${\n      event.title\n    }`;\n  }\n\n  override week(event: CalendarEvent): string {\n    return `<b>${formatDate(event.start, 'HH:mm', this.locale)}</b> ${\n      event.title\n    }`;\n  }\n\n  override day(event: CalendarEvent): string {\n    return `<b>${formatDate(event.start, 'HH:mm', this.locale)}</b> ${\n      event.title\n    }`;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CalendarView } from 'angular-calendar';\n\n@Component({\n  selector: 'app-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss'],\n})\nexport class CalendarHeaderComponent {\n  @Input() view!: CalendarView;\n\n  @Input() viewDate!: Date;\n\n  @Input() locale: string = 'ru';\n\n  @Output() viewChange = new EventEmitter<CalendarView>();\n\n  @Output() viewDateChange = new EventEmitter<Date>();\n\n  CalendarView = CalendarView;\n}\n","<div class=\"header\">\n  <div class=\"col-md-4\">\n    <div class=\"btn-group\">\n      <div class=\"btn btn-primary\" mwlCalendarPreviousView [view]=\"view\" [(viewDate)]=\"viewDate\"\n        (viewDateChange)=\"viewDateChange.next(viewDate)\">\n        <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n      </div>\n      <div class=\"btn btn-outline-secondary\" mwlCalendarToday [(viewDate)]=\"viewDate\"\n        (viewDateChange)=\"viewDateChange.next(viewDate)\">\n        Сегодня\n      </div>\n      <div class=\"btn btn-primary\" mwlCalendarNextView [view]=\"view\" [(viewDate)]=\"viewDate\"\n        (viewDateChange)=\"viewDateChange.next(viewDate)\">\n        <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-4\">\n    <h3>{{ viewDate | calendarDate: view + 'ViewTitle' }}</h3>\n  </div>\n  <div class=\"col-md-4\">\n  </div>\n</div>\n","import { Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { ProfileDTO } from 'src/app/backend/model/profile';\nimport { UserApiService } from 'src/app/backend/services/user-api.service';\n\n@Pipe({\n  name: 'user',\n})\nexport class UserPipe implements PipeTransform {\n  private userApiService = inject(UserApiService);\n\n  transform(value: string): Observable<ProfileDTO | null> {\n    if (!value) {\n      return of(null);\n    }\n    console.log(value)\n    return this.userApiService.getUser(value);\n  }\n\n}\n","<nb-card>\n  <nb-card-header>\n    <button nbButton status=\"primary\" type=\"button\" (click)=\"openDialog(calendarDialog)\">Добавить</button>\n    <nb-select class=\"desktop\" name=\"view\" [selected]=\"view\" (selectedChange)=\"selectView($event)\">\n      <nb-option *ngFor=\"let option of calendarViewOptions\" [value]=\"option\">{{ option }}</nb-option>\n    </nb-select>\n  </nb-card-header>\n  <nb-card-body [ngSwitch]=\"view\">\n    <app-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n    </app-calendar-header>\n    <mwl-calendar-month-view\n      *ngSwitchCase=\"'month'\"\n      precision=\"minutes\"\n      [viewDate]=\"viewDate\"\n      [activeDayIsOpen]=\"activeDayIsOpen\"\n      [events]=\"(events$ | async) || []\"\n      (dayClicked)=\"dayClicked($event.day)\"\n      (eventClicked)=\"openDialog(showInfo, $event.event)\"\n    >\n    </mwl-calendar-month-view>\n    <mwl-calendar-week-view\n      *ngSwitchCase=\"'week'\"\n      precision=\"minutes\"\n      [viewDate]=\"viewDate\"\n      [events]=\"(events$ | async) || []\"\n      (eventClicked)=\"openDialog(showInfo, $event.event)\"\n    >\n    </mwl-calendar-week-view>\n    <mwl-calendar-day-view\n      *ngSwitchCase=\"'day'\"\n      precision=\"minutes\"\n      [viewDate]=\"viewDate\"\n      [events]=\"(events$ | async) || []\"\n      (eventClicked)=\"openDialog(showInfo, $event.event)\"\n    >\n    </mwl-calendar-day-view>\n  </nb-card-body>\n</nb-card>\n\n<ng-template #calendarDialog let-data let-ref=\"dialogRef\">\n  <nb-card>\n    <nb-card-header>Добавить в расписание</nb-card-header>\n    <nb-card-body>\n      <form [formGroup]=\"form\">\n        <div class=\"form-group\">\n          <label for=\"title\">Название</label>\n          <input name=\"title\" nbInput formControlName=\"title\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"teacher_uids\">Преподаватели</label>\n          <nb-select multiple placeholder=\"Выберите преподавателей\" name=\"teacher_uids\" [status]=\"form.get('teacher_uids')?.touched ? (form.get('teacher_uids')?.invalid  ? 'danger' : 'success') : 'basic'\" formControlName=\"teacher_uids\">\n            <nb-option *ngFor=\"let user of users$ | async\" [value]=\"user.uid\">{{ user.first_name }} {{user.last_name}}</nb-option>\n          </nb-select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"colors\">Цвет</label>\n          <nb-select placeholder=\"Выберите цвет\" name=\"colors\" [status]=\"form.get('colors')?.touched ? (form.get('colors')?.invalid  ? 'danger' : 'success') : 'basic'\" formControlName=\"colors\">\n            <nb-option *ngFor=\"let color of colorOptions\" [value]=\"color\">{{ color }}</nb-option>\n          </nb-select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"start_date\">Начало</label>\n          <input name=\"start_date\" nbInput placeholder=\"Выберите дату\" [nbDatepicker]=\"startDatePicker\" formControlName=\"start_date\">\n          <nb-date-timepicker\n            #startDatePicker\n            singleColumn\n            [step]=\"30\"></nb-date-timepicker>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"end_date\">Окончание</label>\n          <input name=\"end_date\" nbInput placeholder=\"Выберите дату\" [nbDatepicker]=\"endDatePicker\" formControlName=\"end_date\">\n          <nb-date-timepicker\n            #endDatePicker\n            singleColumn\n            [step]=\"30\"></nb-date-timepicker>\n        </div>\n        <nb-checkbox formControlName=\"allDay\">Весь день</nb-checkbox>\n      </form>\n    </nb-card-body>\n    <nb-card-footer class=\"footer\">\n      <button nbButton (click)=\"ref.close()\">Отмена</button>\n      <button nbButton status=\"primary\" [disabled]=\"loading\" (click)=\"addEvent(form)\">Сохранить</button>\n    </nb-card-footer>\n  </nb-card>\n</ng-template>\n\n<ng-template #showInfo let-data let-ref=\"dialogRef\">\n  <nb-card>\n    <nb-card-header>Информация</nb-card-header>\n    <nb-card-body>\n      <nb-list>\n        <nb-list-item>\n          <div class=\"title\">Название:</div> <div class=\"value\">{{ data.title }}</div>\n        </nb-list-item>\n        <nb-list-item *ngIf=\"data.meta.teacher_uids\">\n          <div class=\"title\">Преподаватели:</div>\n          <div class=\"value\">\n            <div *ngFor=\"let uid of data.meta.teacher_uids\">\n              <span *ngIf=\"uid | user | async as user\">{{ user?.first_name }} {{ user?.last_name }} </span>\n            </div>\n          </div>\n        </nb-list-item>\n        <nb-list-item>\n          <div class=\"title\">Начало:</div> <div class=\"value\">{{ data.start | date: 'dd.MM.yyyy HH:mm' }}</div>\n        </nb-list-item>\n        <nb-list-item *ngIf=\"data.end\">\n          <div class=\"title\">Окончание:</div> <div class=\"value\">{{ data.end | date: 'dd.MM.yyyy HH:mm' }}</div>\n        </nb-list-item>\n      </nb-list>\n    </nb-card-body>\n  </nb-card>\n</ng-template>\n","import { Component, HostListener, OnInit, TemplateRef, inject } from '@angular/core';\nimport { CalendarDateFormatter, CalendarEvent, CalendarEventAction, CalendarEventTitleFormatter, CalendarView } from 'angular-calendar';\nimport { CalendarService } from '../../services/calendar.service';\nimport { CustomEventTitleFormatter, DateFormatterService } from '../../services/date-formatter.service';\nimport { Observable, map } from 'rxjs';\nimport { NbDialogRef, NbDialogService, NbToastrService } from '@nebular/theme';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { colors } from '../../utils/colors';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { TeacherService } from 'src/app/teacher/services/teacher.service';\nimport { TeacherDTO } from 'src/app/backend/model/teacher';\n\n@Component({\n  selector: 'app-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss'],\n  providers: [\n    {\n      provide: CalendarDateFormatter,\n      useClass: DateFormatterService,\n    },\n    {\n      provide: CalendarEventTitleFormatter,\n      useClass: CustomEventTitleFormatter,\n    },\n  ]\n})\nexport class CalendarComponent implements OnInit {\n  private calendarService = inject(CalendarService);\n  private teacherService = inject(TeacherService);\n  private dialogService = inject(NbDialogService);\n  private toastr = inject(NbToastrService);\n  private formBuilder = inject(FormBuilder);\n\n  private ref!: NbDialogRef<any>;\n  loading = false;\n  activeDayIsOpen = true;\n\n  CalendarView = CalendarView;\n  calendarViewOptions = Object.values(CalendarView);\n\n  viewDate: Date = new Date();\n  view: CalendarView = CalendarView.Month;\n  actions: CalendarEventAction[] = [\n    {\n      label: 'Удалить',\n      a11yLabel: 'Удалить',\n      onClick: ({ event }: { event: CalendarEvent }): void => {\n        this.deleteEvent(event);\n      },\n    },\n  ];\n  colorOptions = Object.keys(colors);\n\n  form: FormGroup = this.formBuilder.group({\n    uid: [''],\n    allDay: [false],\n    colors: ['', Validators.required],\n    start_date: ['', Validators.required],\n    end_date: [''],\n    meta: this.formBuilder.group({\n      type: ['info'],\n    }),\n    title: ['', Validators.required],\n    teacher_uids: [[], Validators.required],\n    is_active: [true, Validators.required],\n  })\n\n  events$!: Observable<CalendarEvent[]>;\n  users$!: Observable<TeacherDTO[]>;\n  selectedEvent!: CalendarEvent;\n\n\n  @HostListener('window:resize', ['$event']) calculateRows() {\n    if (window.innerWidth < 768) {\n      this.view = CalendarView.Day;\n    }\n  }\n\n  ngOnInit(): void {\n    this.calculateRows();\n    this.getData();\n  }\n\n  getData() {\n    this.events$ = this.calendarService.getEvents().pipe(\n      map(events => events.map(event => ({ ...event, actions: this.actions })))\n    );\n    this.users$ = this.teacherService.getList();\n  }\n\n  deleteEvent(event: CalendarEvent) {\n    this.calendarService.removeEvent({ uid: `${event.id}` }).subscribe(() => {\n      this.toastr.show('Событие удалено', 'Данные сохранены', { status: 'success' });\n      this.getData();\n    });\n  }\n\n  selectView(event: CalendarView) {\n    this.view = event;\n  }\n\n  openDialog(dialog: TemplateRef<any>, context?: any) {\n    this.ref = this.dialogService.open(dialog, {\n      context,\n    });\n  }\n\n  addEvent(form: FormGroup) {\n    this.calendarService.addEvent(form.value).subscribe({\n      complete: () => {\n        this.toastr.show('Событие добавлено', 'Данные сохранены', { status: 'success' });\n        this.loading = false;\n        this.ref.close();\n        this.getData();\n      },\n      error: (error) => {\n        this.toastr.show(error?.message, 'Произошла ошибка', { status: 'error' });\n        console.log('error', error);\n        this.loading = false;\n      },\n    })\n  }\n\n  dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\n    if (isSameMonth(date, this.viewDate)) {\n      if (\n        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n        events.length === 0\n      ) {\n        this.activeDayIsOpen = false;\n      } else {\n        this.activeDayIsOpen = true;\n      }\n      this.viewDate = date;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CalendarComponent } from './containers/calendar/calendar.component';\nimport { RouterModule } from '@angular/router';\nimport { CalendarModule } from 'angular-calendar';\nimport { NbButtonModule, NbCardModule, NbCheckboxModule, NbDatepickerModule, NbIconModule, NbInputModule, NbListModule, NbSelectModule } from '@nebular/theme';\nimport { CalendarHeaderComponent } from './components/calendar-header/calendar-header.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '../shared/shared.module';\n\n\n\n@NgModule({\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n  ],\n  imports: [\n    CommonModule,\n    CalendarModule,\n    NbCardModule,\n    NbButtonModule,\n    NbSelectModule,\n    NbCheckboxModule,\n    NbIconModule,\n    NbInputModule,\n    NbListModule,\n    NbIconModule,\n    NbDatepickerModule,\n    ReactiveFormsModule,\n    SharedModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: CalendarComponent,\n        data: {\n          title: 'Расписание',\n        }\n      },\n    ]),\n  ]\n})\nexport class AppCalendarModule { }\n"],"x_google_ignoreList":[]}