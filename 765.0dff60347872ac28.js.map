{"version":3,"file":"765.0dff60347872ac28.js","mappings":"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","names":["ProfileService","constructor","this","inject","NbAuthService","MediaService","UserApiService","uploadFile","files","nbAuthService","getToken","pipe","switchMap","token","path","getPayload","user_id","mediaService","item","map","result","ref","fullPath","throwError","Error","getfile","getMedia","updateUser","user","userApiService","factory","i0","ProfileComponent","AuthService","NbToastrService","FormBuilder","ChangeDetectorRef","formBuilder","group","uid","Validators","phone","email","first_name","middle_name","last_name","gender","description","address","is_teacher","value","disabled","is_student","is_blocked","avatar_urls","form","patchValue","authService","getUser","tap","console","log","getRawValue","event","profileService","target","subscribe","url","cdr","markForCheck","invalid","toastr","show","status","markAsDirty","markAllAsTouched","loading","complete","error","message","selectors","ProfileModule","CommonModule","NbCardModule","ReactiveFormsModule","NbInputModule","NbButtonModule","NbCheckboxModule","NbSelectModule","NbUserModule","SharedModule","RouterModule","component","data","title"],"sourceRoot":"webpack:///","sources":["./src/app/profile/services/profile.service.ts","./src/app/profile/containers/profile/profile.component.html","./src/app/profile/containers/profile/profile.component.ts","./src/app/profile/profile.module.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { NbAuthService } from '@nebular/auth';\nimport { map, switchMap, throwError, Observable } from 'rxjs';\nimport { ProfileDTO } from 'src/app/backend/model/profile';\nimport { MediaService } from 'src/app/backend/services/media.service';\nimport { UserApiService } from 'src/app/backend/services/user-api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfileService {\n  private nbAuthService = inject(NbAuthService);\n  private mediaService = inject(MediaService);\n  private userApiService = inject(UserApiService);\n\n  uploadFile(files: FileList | null) {\n    if (files) {\n      return this.nbAuthService.getToken().pipe(\n        switchMap(token => {\n          const path = `profile/${token.getPayload().user_id}`;\n          return this.mediaService.uploadFile(files.item(0), path)\n        }),\n        map(result => result.ref.fullPath),\n      );\n    }\n    return throwError(() => new Error('no image'));\n  }\n\n  getfile(path: string): Observable<string> {\n    return this.mediaService.getMedia(path);\n  }\n\n  updateUser(user: Partial<ProfileDTO>) {\n    return this.userApiService.updateUser(user);\n  }\n}\n","<nb-card>\n  <form *ngIf=\"{user: user$ | async} as user\" class=\"profile-form\" [formGroup]=\"form\" (submit)=\"updateUser(form)\">\n    <div class=\"profile-image\">\n      <nb-user [picture]=\"form.value.avatar_urls ? (form.value.avatar_urls[0] | mediaUrl | async) || '' : ''\"  showName=\"false\"></nb-user>\n      <button nbButton status=\"primary\" outline type=\"button\" class=\"profile-uplaod-image-button\">\n        <input type=\"file\" (change)=\"uploadFile($event)\" />\n        Загрузить фото\n      </button>\n    </div>\n    <div class=\"profile-block\">\n      <div class=\"form-group\">\n        <label for=\"first_name\">\n          Имя\n        </label>\n        <input name=\"first_name\"\n          [status]=\"form.get('first_name')?.touched ? (form.get('first_name')?.invalid  ? 'danger' : 'success') : 'basic'\"\n          nbInput\n          placeholder=\"Имя\"\n          formControlName=\"first_name\"\n        />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"last_name\">\n          Фамилия\n        </label>\n        <input name=\"last_name\" [status]=\"form.get('last_name')?.touched ? (form.get('last_name')?.invalid  ? 'danger' : 'success') : 'basic'\" nbInput placeholder=\"Фамилия\" formControlName=\"last_name\" />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"middle_name\">\n          Отчество\n        </label>\n        <input name=\"middle_name\" nbInput placeholder=\"Отчество\" formControlName=\"middle_name\" />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"phone\">\n          Телефон\n        </label>\n        <input nbInput placeholder=\"Телефон\" [status]=\"form.get('phone')?.touched ? (form.get('phone')?.invalid  ? 'danger' : 'success') : 'basic'\" name=\"phone\" formControlName=\"phone\" />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"email\">\n          E-mail\n        </label>\n        <input nbInput placeholder=\"E-mail\" [status]=\"form.get('email')?.touched ? (form.get('email')?.invalid  ? 'danger' : 'success') : 'basic'\" name=\"email\" formControlName=\"email\" />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"gender\">\n          Пол\n        </label>\n        <nb-select placeholder=\"Выберите пол\" name=\"gender\" [status]=\"form.get('gender')?.touched ? (form.get('gender')?.invalid  ? 'danger' : 'success') : 'basic'\" formControlName=\"gender\">\n          <nb-option value=\"male\">М</nb-option>\n          <nb-option value=\"female\">Ж</nb-option>\n        </nb-select>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"description\">\n          Описание\n        </label>\n        <textarea nbInput placeholder=\"Описание\" name=\"description\" formControlName=\"description\"></textarea>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"address\">\n          Адрес\n        </label>\n        <textarea nbInput placeholder=\"Адрес\" [status]=\"form.get('address')?.touched ? (form.get('address')?.invalid  ? 'danger' : 'success') : 'basic'\" name=\"address\" formControlName=\"address\"></textarea>\n      </div>\n      <nb-checkbox formControlName=\"is_teacher\">Преподаватель</nb-checkbox>\n      <nb-checkbox formControlName=\"is_student\">Ученик</nb-checkbox>\n      <nb-checkbox formControlName=\"is_blocked\">Заблокирован</nb-checkbox>\n      <div>\n        <button nbButton status=\"primary\" type=\"submit\" [disabled]=\"loading\">Сохранить</button>\n      </div>\n    </div>\n  </form>\n</nb-card>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, inject } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NbAuthService } from '@nebular/auth';\nimport { switchMap, tap, Observable, forkJoin, Subscription } from 'rxjs';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { ProfileService } from '../../services/profile.service';\nimport { NbToastrService } from '@nebular/theme';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProfileComponent {\n  private nbAuthService = inject(NbAuthService);\n  private authService = inject(AuthService);\n  private profileService = inject(ProfileService);\n  private toastr = inject(NbToastrService);\n  private formBuilder = inject(FormBuilder);\n  private cdr = inject(ChangeDetectorRef);\n  loading = false;\n\n  form: FormGroup = this.formBuilder.group({\n    uid: ['', Validators.required],\n    phone: ['', Validators.required],\n    email: ['', [Validators.required, Validators.email]],\n    first_name: ['', Validators.required],\n    middle_name: [''],\n    last_name: ['', Validators.required],\n    gender: ['', Validators.required],\n    description: [''],\n    address: ['', Validators.required],\n    is_teacher: [{ value: false, disabled: true }],\n    is_student: [{ value: false, disabled: true }],\n    is_blocked: [{ value: false, disabled: true }],\n    avatar_urls: [[]],\n  });\n  user$ = this.nbAuthService.getToken().pipe(\n    switchMap(user => {\n      this.form.patchValue({\n        uid: user.getPayload().user_id,\n      });\n      return this.authService.getUser(user.getPayload().user_id);\n    }),\n    tap((user) => {\n      console.log(user);\n      this.form.patchValue(user);\n      console.log(this.form.getRawValue())\n    })\n  );\n\n  uploadFile(event: Event) {\n    this.profileService.uploadFile((event.target as HTMLInputElement).files).subscribe(url => {\n      this.form.patchValue({\n        avatar_urls: [url],\n      });\n      this.cdr.markForCheck();\n    });\n  }\n\n  updateUser(form: FormGroup) {\n    if (form.invalid) {\n      this.toastr.show('Заполните обязательные поля', 'Внимание', { status: 'warning' });\n      this.form.markAsDirty();\n      this.form.markAllAsTouched();\n      this.cdr.markForCheck();\n      console.log(this.form)\n      return;\n    }\n    this.loading = true;\n    this.cdr.markForCheck();\n    this.profileService.updateUser(form.getRawValue()).subscribe({\n      complete: () => {\n        this.toastr.show('Профиль обновлен', 'Данные сохранены', { status: 'success' });\n        this.loading = false;\n        this.cdr.markForCheck();\n      },\n      error: (error) => {\n        this.toastr.show(error?.message, 'Произошла ошибка', { status: 'error' });\n        console.log('error', error);\n        this.loading = false;\n        this.cdr.markForCheck();\n      },\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProfileComponent } from './containers/profile/profile.component';\nimport { RouterModule } from '@angular/router';\nimport { NbButtonModule, NbCardModule, NbCheckboxModule, NbInputModule, NbSelectModule, NbUserModule } from '@nebular/theme';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '../shared/shared.module';\n\n\n\n@NgModule({\n  declarations: [\n    ProfileComponent,\n  ],\n  imports: [\n    CommonModule,\n    NbCardModule,\n    ReactiveFormsModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCheckboxModule,\n    NbSelectModule,\n    NbUserModule,\n    SharedModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: ProfileComponent,\n        data: {\n          title: 'Профиль',\n        }\n      },\n    ]),\n  ],\n})\nexport class ProfileModule { }\n"],"x_google_ignoreList":[]}