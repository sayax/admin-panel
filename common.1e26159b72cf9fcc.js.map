{"version":3,"file":"common.1e26159b72cf9fcc.js","mappings":"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","names":["EventsApiService","constructor","this","inject","Firestore","collection","firestore","Collection","getFilteredEvents","eventQuery","query","eventsCollection","where","orderBy","from","getDocs","pipe","switchMap","data","schedules","docs","map","doc","event","scheduleCollection","uid","scheduleQuery","response","schedule","start_date","end_date","is_active","forkJoin","datas","flat","getEvents","usersQuery","addEvent","hasParameter","created_on","Timestamp","updated_on","addDoc","start_time","toDate","getHours","getMinutes","end_time","getDateList","days","currentDate","setHours","addSchedules","id","updateEvent","throwError","Error","eventUID","batch","writeBatch","set","commit","ref","getDoc","exists","updateDoc","setDoc","updateEnrolledParticipants","enrolled_participants","arrayUnion","removeEnrolledParticipants","arrayRemove","removeEvent","getEvent","mergeMap","of","getEventSchedules","updateEventSchedule","addEventSchedules","list","current","getTime","toMillis","includes","getDay","push","Date","setDate","getDate","object","key","undefined","factory","colors","red","primary","secondary","blue","yellow","UserPipe","UserApiService","transform","value","console","log","userApiService","getUser","pure","TeacherApiService","getTeachers","teacherQuery","teacherCollection","teacherData","teacherObject","reduce","prev","user_uids","getUsersInList","users","user","phone","email","first_name","middle_name","last_name","avatar_url","avatar_urls","styles","level","getTeacher","teacher","addTeacher","updateUser","is_teacher","removeTeacher","TeacherService","getList","teacherApiService","getUsers","getUsersNotTeachers"],"sourceRoot":"webpack:///","sources":["./src/app/backend/services/events-api.service.ts","./src/app/calendar/utils/colors.ts","./src/app/shared/pipes/user.pipe.ts","./src/app/backend/services/teacher-api.service.ts","./src/app/teacher/services/teacher.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { Firestore, Timestamp, addDoc, arrayRemove, arrayUnion, collection, doc, getDoc, getDocs, orderBy, query, setDoc, updateDoc, where, writeBatch } from '@angular/fire/firestore';\nimport { Collection } from '../model/collections';\nimport { Observable, forkJoin, from, map, mergeMap, of, switchMap, throwError } from 'rxjs';\nimport { ICalendarEvent, IEventSchedule } from '../model/event';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventsApiService {\n  private firestore: Firestore = inject(Firestore);\n  private eventsCollection = collection(this.firestore, Collection.EVENTS);\n\n  getFilteredEvents(): Observable<ICalendarEvent[]> {\n    // create an index in a firebase to sort and order\n    const eventQuery = query(this.eventsCollection, where('is_active', '==', true), orderBy('start_date'));\n    return from(getDocs(eventQuery)).pipe(\n      switchMap(data => {\n        const events = data.docs.map(doc => doc.data() as ICalendarEvent);\n        const schedules = events.map(event => {\n          const scheduleCollection = collection(this.firestore, Collection.EVENTS, event.uid, Collection.EVENT_SCHEDULES);\n          const scheduleQuery = query(scheduleCollection);\n          return from(getDocs(scheduleQuery)).pipe(\n            map(\n              response => response.docs.map(doc => doc.data() as IEventSchedule).map(schedule => ({\n                ...event,\n                start_date: schedule.start_date,\n                end_date: schedule.end_date,\n                is_active: schedule.is_active,\n              } as ICalendarEvent))\n            ),\n          )\n        });\n        return forkJoin(schedules).pipe(\n          map(datas => datas.flat()),\n        );\n      }),\n    )\n  }\n\n  getEvents(): Observable<ICalendarEvent[]> {\n    const usersQuery = query(this.eventsCollection, orderBy('created_on', 'desc'));\n    return from(getDocs(usersQuery)).pipe(\n      map(data => data.docs.map(doc => doc.data() as ICalendarEvent)),\n    )\n  }\n\n  addEvent(event: Exclude<ICalendarEvent, 'uid' | 'created_on' | 'updated_on'>): Observable<string> {\n    if (!event) {\n      return throwError(() => new Error('Event is missing'));\n    }\n    if (\n      !this.hasParameter(event, 'start_date') ||\n      !this.hasParameter(event, 'end_date') ||\n      !this.hasParameter(event, 'days')\n    ) {\n      return throwError(() => new Error('Parameter is missing'));\n    }\n    event.created_on = Timestamp.now();\n    event.updated_on = Timestamp.now();\n    event.is_active = true;\n    return from(addDoc(this.eventsCollection, event)).pipe(\n      switchMap(doc => {\n        const start_time = [event.start_date.toDate().getHours(), event.start_date.toDate().getMinutes()];\n        const end_time = [event.end_date.toDate().getHours(), event.end_date.toDate().getMinutes()];\n        const schedules: Partial<IEventSchedule>[] = this.getDateList(event.start_date, event.end_date, event.days).map(currentDate => {\n          return {\n            is_active: true,\n            start_date: Timestamp.fromMillis(currentDate.setHours(start_time[0], start_time[1])),\n            end_date: Timestamp.fromMillis(currentDate.setHours(end_time[0], end_time[1])),\n          }\n        });\n        return forkJoin([\n          this.addSchedules(doc.id, schedules),\n          this.updateEvent({ uid: doc.id }),\n        ]).pipe(\n          map(() => doc.id),\n        )\n      })\n    );\n  }\n\n  addSchedules(eventUID: string, schedules: Partial<IEventSchedule>[]): Observable<void> {\n    const batch = writeBatch(this.firestore);\n    const scheduleCollection = collection(this.firestore, Collection.EVENTS, eventUID, Collection.EVENT_SCHEDULES);\n    schedules.map(schedule => {\n      batch.set(doc(scheduleCollection), schedule);\n    });\n    return from(batch.commit());\n  }\n\n  updateEvent(event: Partial<ICalendarEvent>): Observable<void> {\n    if (!event.uid) {\n      return throwError(() => new Error('ID is missing'));\n    }\n    const ref = doc(this.eventsCollection, event.uid);\n    return from(getDoc(ref)).pipe(\n      switchMap(doc => {\n        event.updated_on = Timestamp.now();\n        if (doc.exists()) {\n          return from(updateDoc(ref, event))\n        }\n        event.created_on = Timestamp.now();\n        return from(setDoc(ref, event))\n      }),\n    )\n  }\n\n  updateEnrolledParticipants(event: Pick<ICalendarEvent, 'uid' | 'enrolled_participants'>): Observable<void> {\n    if (!event.uid) {\n      return throwError(() => new Error('ID is missing'));\n    }\n    const ref = doc(this.eventsCollection, event.uid);\n    return from(getDoc(ref)).pipe(\n      switchMap(doc => {\n        const updated_on = Timestamp.now();\n        if (doc.exists()) {\n          return from(updateDoc(ref, {\n            enrolled_participants: arrayUnion(event.enrolled_participants),\n            updated_on,\n          }))\n        }\n        const created_on = Timestamp.now();\n        return from(setDoc(ref, {\n          enrolled_participants: arrayUnion(event.enrolled_participants),\n          updated_on,\n          created_on,\n        }))\n      }),\n    )\n  }\n\n  removeEnrolledParticipants(event: Pick<ICalendarEvent, 'uid' | 'enrolled_participants'>): Observable<void> {\n    if (!event.uid) {\n      return throwError(() => new Error('ID is missing'));\n    }\n    const ref = doc(this.eventsCollection, event.uid);\n    return from(getDoc(ref)).pipe(\n      switchMap(doc => {\n        const updated_on = Timestamp.now();\n        if (doc.exists()) {\n          return from(updateDoc(ref, {\n            enrolled_participants: arrayRemove(event.enrolled_participants),\n            updated_on,\n          }))\n        }\n        const created_on = Timestamp.now();\n        return from(setDoc(ref, {\n          enrolled_participants: arrayRemove(event.enrolled_participants),\n          updated_on,\n          created_on,\n        }))\n      }),\n    )\n  }\n\n  removeEvent(event: Partial<ICalendarEvent>): Observable<void> {\n    const ref = doc(this.eventsCollection, event.uid);\n    event.updated_on = Timestamp.now();\n    return from(updateDoc(ref, {\n      is_active: false,\n      updated_on: event.updated_on,\n    }));\n  }\n\n  getEvent(uid: string): Observable<ICalendarEvent> {\n    const ref = doc(this.eventsCollection, uid);\n    return from(getDoc(ref)).pipe(\n      mergeMap(data => data.exists() ? of(data) : throwError(() => new Error('Event not found'))),\n      map(data => data.data() as ICalendarEvent),\n    );\n  }\n\n  getEventSchedules(eventUID: string): Observable<IEventSchedule[]> {\n    const scheduleCollection = collection(this.firestore, Collection.EVENTS, eventUID, Collection.EVENT_SCHEDULES);\n    const scheduleQuery = query(scheduleCollection, orderBy('start_date'));\n    return from(getDocs(scheduleQuery)).pipe(\n      map(data => data.docs.map(doc => ({ ...doc.data(), uid: doc.id } as IEventSchedule))),\n    );\n  }\n\n  updateEventSchedule(eventUID: string, schedule: Partial<IEventSchedule>): Observable<void> {\n    if (!eventUID || !schedule.uid) {\n      return throwError(() => new Error('ID is missing'));\n    }\n    const scheduleCollection = collection(this.firestore, Collection.EVENTS, eventUID, Collection.EVENT_SCHEDULES);\n    const ref = doc(scheduleCollection, schedule.uid);\n    return from(getDoc(ref)).pipe(\n      switchMap(doc => {\n        if (doc.exists()) {\n          return from(updateDoc(ref, schedule))\n        }\n        return from(setDoc(ref, schedule))\n      }),\n    )\n  }\n\n  addEventSchedules(eventUID: string, schedule: Pick<ICalendarEvent, 'start_date' | 'end_date' | 'days'>): Observable<string> {\n    if (!eventUID) {\n      return throwError(() => new Error('ID is missing'));\n    }\n    const start_time = [schedule.start_date.toDate().getHours(), schedule.start_date.toDate().getMinutes()];\n    const end_time = [schedule.end_date.toDate().getHours(), schedule.end_date.toDate().getMinutes()];\n    const schedules: Partial<IEventSchedule>[] = this.getDateList(schedule.start_date, schedule.end_date, schedule.days).map(currentDate => {\n      return {\n        is_active: true,\n        start_date: Timestamp.fromMillis(currentDate.setHours(start_time[0], start_time[1])),\n        end_date: Timestamp.fromMillis(currentDate.setHours(end_time[0], end_time[1])),\n      }\n    });\n    return forkJoin([\n      this.addSchedules(eventUID, schedules),\n      this.updateEvent({ uid: eventUID, end_date: schedule.end_date }),\n    ]).pipe(\n      map(() => eventUID),\n    )\n  }\n\n  private getDateList(start_date: Timestamp, end_date: Timestamp, days: number[]): Date[] {\n    if (!start_date || !end_date) {\n      return [];\n    }\n    const list: Date[] = [];\n    let current = start_date.toDate();\n    while (current.getTime() <= end_date.toMillis()) {\n      if (days.includes(current.getDay())) {\n        list.push(new Date(current));\n      }\n      current.setDate(current.getDate() + 1);\n    }\n    return list;\n  }\n\n  private hasParameter<T>(object: T, key: keyof T): boolean {\n    return object[key] !== null || object[key] !== undefined;\n  }\n}\n","export const colors = {\r\n  red: {\r\n    primary: '#ad2121',\r\n    secondary: '#FAE3E3',\r\n  },\r\n  blue: {\r\n    primary: '#1e90ff',\r\n    secondary: '#D1E8FF',\r\n  },\r\n  yellow: {\r\n    primary: '#e3bc08',\r\n    secondary: '#FDF1BA',\r\n  },\r\n}\r\n","import { Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { ProfileDTO } from 'src/app/backend/model/profile';\nimport { UserApiService } from 'src/app/backend/services/user-api.service';\n\n@Pipe({\n  name: 'user',\n})\nexport class UserPipe implements PipeTransform {\n  private userApiService = inject(UserApiService);\n\n  transform(value: string): Observable<ProfileDTO | null> {\n    if (!value) {\n      return of(null);\n    }\n    console.log(value)\n    return this.userApiService.getUser(value);\n  }\n\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Firestore, Timestamp, collection, doc, getDoc, getDocs, query, setDoc, updateDoc, where } from '@angular/fire/firestore';\nimport { Observable, from, map, switchMap } from 'rxjs';\nimport { Teacher, TeacherDTO } from '../model/teacher';\nimport { Collection } from '../model/collections';\nimport { UserApiService } from './user-api.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TeacherApiService {\n  private firestore: Firestore = inject(Firestore);\n  private teacherCollection = collection(this.firestore, Collection.TEACHER);\n  private userApiService = inject(UserApiService);\n\n  getTeachers(): Observable<TeacherDTO[]> {\n    const teacherQuery = query(this.teacherCollection, where('is_active', '==', true));\n    const teacherSnapshot = from(getDocs(teacherQuery));\n    return teacherSnapshot.pipe(\n      switchMap(data => {\n        const teacherData = data.docs.map(doc => doc.data() as Teacher);\n        const teacherObject: {[key: string]: Teacher} = teacherData.reduce((prev, current) => ({\n          ...prev,\n          [current.uid]: current,\n        }), {});\n        const user_uids = teacherData.map(doc => doc.uid);\n        return this.userApiService.getUsersInList(user_uids).pipe(\n          map(users => {\n            return users.map(user => {\n              const consolidated: TeacherDTO = {\n                uid: teacherObject[user.uid].uid,\n                phone: user.phone,\n                email: user.email,\n                first_name: user.first_name,\n                middle_name: user.middle_name,\n                last_name: user.last_name,\n                avatar_url: user.avatar_urls ? user.avatar_urls[0] : '',\n                start_date: teacherObject[user.uid].start_date,\n                styles: teacherObject[user.uid].styles,\n                level: teacherObject[user.uid].level,\n              };\n              return consolidated;\n            })\n          })\n        )\n      })\n    )\n  }\n\n  getTeacher(uid: string): Observable<TeacherDTO> {\n    const ref = doc(this.teacherCollection, uid);\n    return from(getDoc(ref)).pipe(\n      map(data => data.data() as Teacher),\n      switchMap(teacher => {\n        return this.userApiService.getUser(teacher.uid).pipe(\n          map(user => ({\n            uid: teacher.uid,\n            phone: user.phone,\n            email: user.email,\n            first_name: user.first_name,\n            middle_name: user.middle_name,\n            last_name: user.last_name,\n            avatar_url: user.avatar_urls[0],\n            start_date: teacher.start_date,\n            styles: teacher.styles,\n            level: teacher.level,\n          }))\n        )\n      })\n    )\n  }\n\n  addTeacher(teacher: Partial<Teacher>): Observable<void> {\n    const ref = doc(this.teacherCollection, teacher.uid);\n    return from(getDoc(ref)).pipe(\n      switchMap(doc => {\n        teacher.updated_on = Timestamp.now();\n        teacher.start_date = Timestamp.now();\n        if (doc.exists()) {\n          return from(updateDoc(ref, teacher))\n        }\n        teacher.created_on = Timestamp.now();\n        return from(setDoc(ref, teacher))\n      }),\n      switchMap(() => this.userApiService.updateUser({\n        uid: teacher.uid,\n        is_teacher: true,\n      })),\n    )\n  }\n\n  removeTeacher(teacher: Partial<Teacher>): Observable<void> {\n    const ref = doc(this.teacherCollection, teacher.uid);\n    teacher.updated_on = Timestamp.now();\n    teacher.end_date = Timestamp.now();\n    return from(updateDoc(ref, {\n      uid: teacher.uid,\n      is_active: false,\n      updated_on: teacher.updated_on,\n      end_date: teacher.end_date,\n    })).pipe(\n      switchMap(() => this.userApiService.updateUser({\n        uid: teacher.uid,\n        is_teacher: false,\n      })),\n    );\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProfileDTO } from 'src/app/backend/model/profile';\nimport { Teacher, TeacherDTO } from 'src/app/backend/model/teacher';\nimport { TeacherApiService } from 'src/app/backend/services/teacher-api.service';\nimport { UserApiService } from 'src/app/backend/services/user-api.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TeacherService {\n  private teacherApiService = inject(TeacherApiService);\n  private userApiService = inject(UserApiService);\n\n  getList(): Observable<TeacherDTO[]> {\n    return this.teacherApiService.getTeachers();\n  }\n\n  getUsers(): Observable<ProfileDTO[]> {\n    return this.userApiService.getUsersNotTeachers();\n  }\n\n  addTeacher(teacher: Partial<Teacher>): Observable<void> {\n    return this.teacherApiService.addTeacher(teacher);\n  }\n\n  removeTeacher(teacher: Partial<Teacher>): Observable<void> {\n    return this.teacherApiService.removeTeacher(teacher);\n  }\n}\n"],"x_google_ignoreList":[]}