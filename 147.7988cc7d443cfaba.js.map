{"version":3,"file":"147.7988cc7d443cfaba.js","mappings":"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","names":["EventService","constructor","this","inject","EventsApiService","NbAuthService","getEvents","eventApiService","addEvent","event","nbAuthService","getToken","pipe","switchMap","token","owner_uid","getPayload","user_id","updateEvent","removeEvent","factory","DAY","i0","EventListComponent","FormBuilder","NbDialogService","TeacherService","NbToastrService","teacherService","getList","formBuilder","group","uid","allDay","colors","Validators","start_date","end_date","days","meta","type","title","teacher_uids","is_active","Object","keys","entries","map","value","calculateRows","isMobile","window","innerWidth","ngOnInit","getData","events$","eventService","openDialog","dialog","context","ref","dialogService","open","form","start","Date","end","isNaN","getTime","toastr","show","status","Timestamp","day","subscribe","complete","loading","close","error","message","console","log","deleteEvent","selectors","ctx","EventEditComponent","routes","path","redirectTo","pathMatch","component","data","EventModule","CommonModule","NbLayoutModule","NbCardModule","NbIconModule","NbInputModule","NbButtonModule","NbSelectModule","NbListModule","NbCheckboxModule","NbDatepickerModule","NbTimepickerModule","ReactiveFormsModule","SharedModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./src/app/event/services/event.service.ts","./src/app/event/utils/event.ts","./src/app/event/containers/event-list/event-list.component.html","./src/app/event/containers/event-list/event-list.component.ts","./src/app/event/containers/event-edit/event-edit.component.ts","./src/app/event/containers/event-edit/event-edit.component.html","./src/app/event/event.module.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { NbAuthService } from '@nebular/auth';\nimport { Observable, switchMap } from 'rxjs'\nimport { ICalendarEvent } from 'src/app/backend/model/event';\nimport { EventsApiService } from 'src/app/backend/services/events-api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n  private eventApiService = inject(EventsApiService);\n  private nbAuthService = inject(NbAuthService);\n\n  getEvents(): Observable<ICalendarEvent[]> {\n    return this.eventApiService.getEvents();\n  }\n\n  addEvent(event: Exclude<ICalendarEvent, 'uid' | 'created_on' | 'updated_on'>): Observable<string> {\n    return this.nbAuthService.getToken().pipe(\n      switchMap(token => {\n        event.owner_uid = token.getPayload().user_id;\n        return this.eventApiService.addEvent(event);\n      }),\n    );\n  }\n\n  updateEvent(event: Partial<ICalendarEvent>): Observable<void> {\n    return this.eventApiService.updateEvent(event);\n  }\n\n  removeEvent(event: Partial<ICalendarEvent>): Observable<void> {\n    return this.eventApiService.removeEvent(event);\n  }\n}\n","export const DAY = {\r\n  1: 'Понедельник',\r\n  2: 'Вторник',\r\n  3: 'Среда',\r\n  4: 'Четверг',\r\n  5: 'Пятница',\r\n  6: 'Суббота',\r\n  0: 'Воскресенье',\r\n}\r\n","<nb-layout>\n  <nb-layout-column>\n    <nb-card>\n      <nb-card-header>\n        <button nbButton status=\"primary\" type=\"button\" (click)=\"openDialog(createDialog)\">Добавить</button>\n      </nb-card-header>\n      <nb-card-body>\n        <nb-list class=\"event-table\">\n          <nb-list-item class=\"event-row\">\n            <div class=\"event-cell\">UID</div>\n            <div class=\"event-cell\">Название</div>\n            <div class=\"event-cell\">Статус</div>\n            <div class=\"event-cell\">Кто</div>\n            <div class=\"event-cell\">Дата создания</div>\n            <div class=\"event-cell\">Дата обновления</div>\n            <div class=\"event-cell\">Начало события</div>\n            <div class=\"event-cell\">Окончание события</div>\n            <div class=\"event-cell\"></div>\n          </nb-list-item>\n          <nb-list-item *ngFor=\"let event of events$ | async\" class=\"event-row\">\n            <div class=\"event-cell\">{{ event.uid }}</div>\n            <div class=\"event-cell\">{{ event.title }}</div>\n            <div class=\"event-cell\">{{ event.is_active ? 'Активен' : 'Деактивирован' }}</div>\n            <div class=\"event-cell\" *ngIf=\"event.owner_uid | user | async as user; else empty\">{{ user.first_name }} {{ user.last_name }}</div>\n            <div class=\"event-cell\" *ngIf=\"event.created_on; else empty\">{{ event.created_on.toMillis() | date: 'dd MM yyyy HH:mm' }}</div>\n            <div class=\"event-cell\" *ngIf=\"event.updated_on; else empty\">{{ event.updated_on.toMillis() | date: 'dd MM yyyy HH:mm' }}</div>\n            <div class=\"event-cell\" *ngIf=\"event.start_date; else empty\">{{ event.start_date.toMillis() | date: 'dd MM yyyy HH:mm' }}</div>\n            <div class=\"event-cell\" *ngIf=\"event.end_date; else empty\">{{ event.end_date.toMillis() | date: 'dd MM yyyy HH:mm' }}</div>\n            <div class=\"event-cell\">\n              <button type=\"button\" nbButton [routerLink]=\"['../', event.uid]\"><nb-icon icon=\"edit-outline\"></nb-icon></button>\n              <button type=\"button\" nbButton (click)=\"deleteEvent(event)\"><nb-icon icon=\"trash-outline\"></nb-icon></button>\n            </div>\n          </nb-list-item>\n          <ng-template #empty>\n            <div class=\"event-cell\"></div>\n          </ng-template>\n        </nb-list>\n      </nb-card-body>\n    </nb-card>\n  </nb-layout-column>\n</nb-layout>\n\n<ng-template #createDialog let-data let-ref=\"dialogRef\">\n  <nb-card>\n    <nb-card-header>Добавить в расписание</nb-card-header>\n    <nb-card-body>\n      <form [formGroup]=\"form\">\n        <div class=\"form-group\">\n          <label for=\"title\">Название</label>\n          <input name=\"title\" nbInput formControlName=\"title\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"teacher_uids\">Преподаватели</label>\n          <nb-select multiple placeholder=\"Выберите преподавателей\" name=\"teacher_uids\"\n            [status]=\"form.get('teacher_uids')?.touched ? (form.get('teacher_uids')?.invalid  ? 'danger' : 'success') : 'basic'\"\n            formControlName=\"teacher_uids\">\n            <nb-option *ngFor=\"let user of users$ | async\" [value]=\"user.uid\">{{ user.first_name }}\n              {{user.last_name}}</nb-option>\n          </nb-select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"colors\">Цвет</label>\n          <nb-select placeholder=\"Выберите цвет\" name=\"colors\"\n            [status]=\"form.get('colors')?.touched ? (form.get('colors')?.invalid  ? 'danger' : 'success') : 'basic'\"\n            formControlName=\"colors\">\n            <nb-option *ngFor=\"let color of colorOptions\" [value]=\"color\">{{ color }}</nb-option>\n          </nb-select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"start_date\">Начало</label>\n          <ng-container *ngIf=\"!isMobile; else startDate\">\n            <input name=\"start_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\" [nbDatepicker]=\"startDatePicker\"\n              formControlName=\"start_date\">\n            <nb-date-timepicker #startDatePicker singleColumn [step]=\"30\"></nb-date-timepicker>\n          </ng-container>\n          <ng-template #startDate>\n            <input name=\"start_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\"\n              formControlName=\"start_date\">\n          </ng-template>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"end_date\">Окончание</label>\n          <ng-container *ngIf=\"!isMobile; else endDate\">\n            <input name=\"end_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\" [nbDatepicker]=\"endDatePicker\"\n              formControlName=\"end_date\">\n            <nb-date-timepicker #endDatePicker singleColumn [step]=\"30\"></nb-date-timepicker>\n          </ng-container>\n          <ng-template #endDate>\n            <input name=\"end_date\" nbInput placeholder=\"yyyy-mm-dd HH:mm\"\n              formControlName=\"end_date\">\n          </ng-template>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"days\">Дни</label>\n          <nb-select multiple placeholder=\"Выберите дни\" name=\"days\"\n            [status]=\"form.get('days')?.touched ? (form.get('days')?.invalid  ? 'danger' : 'success') : 'basic'\"\n            formControlName=\"days\">\n            <nb-option *ngFor=\"let day of dayOptions\" [value]=\"day.value\">{{ day.title }}</nb-option>\n          </nb-select>\n        </div>\n        <nb-checkbox formControlName=\"allDay\">Весь день</nb-checkbox>\n      </form>\n    </nb-card-body>\n    <nb-card-footer class=\"footer\">\n      <button nbButton (click)=\"ref.close()\">Отмена</button>\n      <button nbButton status=\"primary\" [disabled]=\"loading\" (click)=\"addEvent(form)\">Сохранить</button>\n    </nb-card-footer>\n  </nb-card>\n</ng-template>\n","import { Component, inject, TemplateRef, HostListener } from '@angular/core';\nimport { Timestamp } from '@angular/fire/firestore';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NbDialogRef, NbDialogService, NbNativeDateService, NbToastrService } from '@nebular/theme';\nimport { Observable } from 'rxjs';\nimport { colors } from 'src/app/calendar/utils/colors';\nimport { TeacherService } from 'src/app/teacher/services/teacher.service';\nimport { EventService } from '../../services/event.service';\nimport { ICalendarEvent } from 'src/app/backend/model/event';\nimport { DAY } from '../../utils/event';\n\n@Component({\n  selector: 'app-event-list',\n  templateUrl: './event-list.component.html',\n  styleUrls: ['./event-list.component.scss'],\n})\nexport class EventListComponent {\n  private formBuilder = inject(FormBuilder);\n  private dialogService = inject(NbDialogService);\n  private teacherService = inject(TeacherService);\n  private eventService = inject(EventService);\n  private toastr = inject(NbToastrService);\n\n  events$!: Observable<ICalendarEvent[]>;\n  users$ = this.teacherService.getList();\n\n  private ref!: NbDialogRef<any>;\n  form: FormGroup = this.formBuilder.group({\n    uid: [''],\n    allDay: [false],\n    colors: ['', Validators.required],\n    start_date: ['', Validators.required],\n    end_date: ['', Validators.required],\n    days: [[]],\n    meta: this.formBuilder.group({\n      type: ['info'],\n    }),\n    title: ['', Validators.required],\n    teacher_uids: [[], Validators.required],\n    is_active: [true, Validators.required],\n  })\n  loading = false;\n  colorOptions = Object.keys(colors);\n  dayOptions = Object.entries(DAY).map(([value, title]) => ({ value, title }));\n\n  isMobile = false;\n  @HostListener('window:resize', ['$event']) calculateRows() {\n    this.isMobile = window.innerWidth < 768;\n  }\n\n  ngOnInit(): void {\n    this.calculateRows();\n    this.getData();\n  }\n\n  getData() {\n    this.events$ = this.eventService.getEvents();\n  }\n\n  openDialog(dialog: TemplateRef<any>, context?: any) {\n    this.ref = this.dialogService.open(dialog, {\n      context,\n    });\n  }\n\n  addEvent(form: FormGroup) {\n    const start = new Date(form.value.start_date);\n    const end = new Date(form.value.end_date);\n    if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n      this.toastr.show('Неверный формат даты', 'Произошла ошибка', { status: 'danger' });\n      return;\n    }\n    form.value.start_date = Timestamp.fromDate(start);\n    form.value.end_date = Timestamp.fromDate(end);\n    form.value.days = form.value.days.map((day: string) => +day);\n    this.eventService.addEvent(form.value).subscribe({\n      complete: () => {\n        this.toastr.show('Событие добавлено', 'Данные сохранены', { status: 'success' });\n        this.loading = false;\n        this.ref.close();\n        this.getData();\n      },\n      error: (error) => {\n        this.toastr.show(error?.message, 'Произошла ошибка', { status: 'danger' });\n        console.log('error', error);\n        this.loading = false;\n      },\n    })\n  }\n\n  deleteEvent(event: ICalendarEvent) {\n    this.eventService.removeEvent({ uid: event.uid }).subscribe(() => {\n      this.toastr.show('Событие удалено', 'Данные сохранены', { status: 'success' });\n      this.getData();\n    });\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-event-edit',\n  templateUrl: './event-edit.component.html',\n  styleUrls: ['./event-edit.component.scss']\n})\nexport class EventEditComponent {\n\n}\n","<p>event-edit works!</p>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EventListComponent } from './containers/event-list/event-list.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NbButtonModule, NbCardModule, NbCheckboxModule, NbDatepickerModule, NbIconModule, NbInputModule, NbLayoutModule, NbListModule, NbNativeDateService, NbSelectModule, NbTimepickerModule } from '@nebular/theme';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '../shared/shared.module';\nimport { EventEditComponent } from './containers/event-edit/event-edit.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'list',\n    pathMatch: 'full',\n  },\n  {\n    path: 'list',\n    component: EventListComponent,\n    data: {\n      title: 'События',\n    }\n  },\n  {\n    path: ':id',\n    component: EventEditComponent,\n    data: {\n      title: 'Редактирование',\n    }\n  },\n];\n\n@NgModule({\n  declarations: [\n    EventListComponent,\n    EventEditComponent,\n  ],\n  imports: [\n    CommonModule,\n    NbLayoutModule,\n    NbCardModule,\n    NbIconModule,\n    NbInputModule,\n    NbButtonModule,\n    NbSelectModule,\n    NbListModule,\n    NbCheckboxModule,\n    NbDatepickerModule,\n    NbTimepickerModule,\n    ReactiveFormsModule,\n    SharedModule,\n    RouterModule.forChild(routes),\n  ],\n})\nexport class EventModule { }\n"],"x_google_ignoreList":[]}