{"version":3,"file":"common.3220358308a88d1f.js","mappings":"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","names":["TeacherApiService","constructor","this","inject","Firestore","collection","firestore","Collection","UserApiService","getTeachers","teacherQuery","query","teacherCollection","where","from","getDocs","pipe","switchMap","data","teacherData","docs","map","doc","teacherObject","reduce","prev","current","uid","user_uids","userApiService","getUsersInList","users","user","phone","email","first_name","middle_name","last_name","avatar_url","avatar_urls","start_date","styles","level","getTeacher","ref","getDoc","teacher","getUser","addTeacher","updated_on","Timestamp","exists","updateDoc","created_on","setDoc","updateUser","is_teacher","removeTeacher","end_date","is_active","factory","TeacherService","getList","teacherApiService","getUsers","getUsersNotTeachers"],"sourceRoot":"webpack:///","sources":["./src/app/backend/services/teacher-api.service.ts","./src/app/teacher/services/teacher.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { Firestore, Timestamp, collection, doc, getDoc, getDocs, query, setDoc, updateDoc, where } from '@angular/fire/firestore';\nimport { Observable, from, map, switchMap } from 'rxjs';\nimport { Teacher, TeacherDTO } from '../model/teacher';\nimport { Collection } from '../model/collections';\nimport { UserApiService } from './user-api.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TeacherApiService {\n  private firestore: Firestore = inject(Firestore);\n  private teacherCollection = collection(this.firestore, Collection.TEACHER);\n  private userApiService = inject(UserApiService);\n\n  getTeachers(): Observable<TeacherDTO[]> {\n    const teacherQuery = query(this.teacherCollection, where('is_active', '==', true));\n    const teacherSnapshot = from(getDocs(teacherQuery));\n    return teacherSnapshot.pipe(\n      switchMap(data => {\n        const teacherData = data.docs.map(doc => doc.data() as Teacher);\n        const teacherObject: {[key: string]: Teacher} = teacherData.reduce((prev, current) => ({\n          ...prev,\n          [current.uid]: current,\n        }), {});\n        const user_uids = teacherData.map(doc => doc.uid);\n        return this.userApiService.getUsersInList(user_uids).pipe(\n          map(users => {\n            return users.map(user => {\n              const consolidated: TeacherDTO = {\n                uid: teacherObject[user.uid].uid,\n                phone: user.phone,\n                email: user.email,\n                first_name: user.first_name,\n                middle_name: user.middle_name,\n                last_name: user.last_name,\n                avatar_url: user.avatar_urls ? user.avatar_urls[0] : '',\n                start_date: teacherObject[user.uid].start_date,\n                styles: teacherObject[user.uid].styles,\n                level: teacherObject[user.uid].level,\n              };\n              return consolidated;\n            })\n          })\n        )\n      })\n    )\n  }\n\n  getTeacher(uid: string): Observable<TeacherDTO> {\n    const ref = doc(this.teacherCollection, uid);\n    return from(getDoc(ref)).pipe(\n      map(data => data.data() as Teacher),\n      switchMap(teacher => {\n        return this.userApiService.getUser(teacher.uid).pipe(\n          map(user => ({\n            uid: teacher.uid,\n            phone: user.phone,\n            email: user.email,\n            first_name: user.first_name,\n            middle_name: user.middle_name,\n            last_name: user.last_name,\n            avatar_url: user.avatar_urls[0],\n            start_date: teacher.start_date,\n            styles: teacher.styles,\n            level: teacher.level,\n          }))\n        )\n      })\n    )\n  }\n\n  addTeacher(teacher: Partial<Teacher>): Observable<void> {\n    const ref = doc(this.teacherCollection, teacher.uid);\n    return from(getDoc(ref)).pipe(\n      switchMap(doc => {\n        teacher.updated_on = Timestamp.now();\n        teacher.start_date = Timestamp.now();\n        if (doc.exists()) {\n          return from(updateDoc(ref, teacher))\n        }\n        teacher.created_on = Timestamp.now();\n        return from(setDoc(ref, teacher))\n      }),\n      switchMap(() => this.userApiService.updateUser({\n        uid: teacher.uid,\n        is_teacher: true,\n      })),\n    )\n  }\n\n  removeTeacher(teacher: Partial<Teacher>): Observable<void> {\n    const ref = doc(this.teacherCollection, teacher.uid);\n    teacher.updated_on = Timestamp.now();\n    teacher.end_date = Timestamp.now();\n    return from(updateDoc(ref, {\n      uid: teacher.uid,\n      is_active: false,\n      updated_on: teacher.updated_on,\n      end_date: teacher.end_date,\n    })).pipe(\n      switchMap(() => this.userApiService.updateUser({\n        uid: teacher.uid,\n        is_teacher: false,\n      })),\n    );\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProfileDTO } from 'src/app/backend/model/profile';\nimport { Teacher, TeacherDTO } from 'src/app/backend/model/teacher';\nimport { TeacherApiService } from 'src/app/backend/services/teacher-api.service';\nimport { UserApiService } from 'src/app/backend/services/user-api.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TeacherService {\n  private teacherApiService = inject(TeacherApiService);\n  private userApiService = inject(UserApiService);\n\n  getList(): Observable<TeacherDTO[]> {\n    return this.teacherApiService.getTeachers();\n  }\n\n  getUsers(): Observable<ProfileDTO[]> {\n    return this.userApiService.getUsersNotTeachers();\n  }\n\n  addTeacher(teacher: Partial<Teacher>): Observable<void> {\n    return this.teacherApiService.addTeacher(teacher);\n  }\n\n  removeTeacher(teacher: Partial<Teacher>): Observable<void> {\n    return this.teacherApiService.removeTeacher(teacher);\n  }\n}\n"],"x_google_ignoreList":[]}