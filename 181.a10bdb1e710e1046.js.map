{"version":3,"file":"181.a10bdb1e710e1046.js","mappings":"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","names":["CalendarService","constructor","this","inject","EventsApiService","UserApiService","getEvents","eventApiService","getFilteredEvents","pipe","map","events","console","log","event","convertEventToCalendar","getUsersByIds","uids","userApiService","getUsersInList","id","uid","start","Date","start_date","toMillis","end","end_date","undefined","title","color","colors","allDay","cssClass","meta","teacher_uids","factory","DateFormatterService","CalendarDateFormatter","monthViewColumnHeader","date","locale","formatDate","dayViewHour","weekViewHour","t","CustomEventTitleFormatter","CalendarEventTitleFormatter","super","month","week","day","core","LOCALE_ID","CalendarHeaderComponent","EventEmitter","CalendarView","selectors","i0","ctx","CalendarComponent","NbDialogService","NbToastrService","Object","values","calculateRows","window","innerWidth","view","ngOnInit","getData","events$","calendarService","selectView","openDialog","dialog","context","ref","dialogService","open","dayClicked","isSameMonth","viewDate","isSameDay","activeDayIsOpen","length","provide","useClass","decls","AppCalendarModule","CommonModule","CalendarModule","NbLayoutModule","NbCardModule","NbButtonModule","NbSelectModule","NbIconModule","NbListModule","SharedModule","RouterModule","path","component","data"],"sourceRoot":"webpack:///","sources":["./src/app/calendar/services/calendar.service.ts","./src/app/calendar/services/date-formatter.service.ts","./src/app/calendar/components/calendar-header/calendar-header.component.ts","./src/app/calendar/components/calendar-header/calendar-header.component.html","./src/app/calendar/containers/calendar/calendar.component.html","./src/app/calendar/containers/calendar/calendar.component.ts","./src/app/calendar/calendar.module.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { CalendarEvent } from 'angular-calendar';\nimport { Observable, map, switchMap } from 'rxjs';\nimport { ICalendarEvent } from 'src/app/backend/model/event';\nimport { colors } from '../utils/colors';\nimport { Timestamp } from '@angular/fire/firestore';\nimport { NbAuthService } from '@nebular/auth';\nimport { UserApiService } from 'src/app/backend/services/user-api.service';\nimport { ProfileDTO } from 'src/app/backend/model/profile';\nimport { EventsApiService } from 'src/app/backend/services/events-api.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CalendarService {\n  private eventApiService = inject(EventsApiService);\n  private userApiService = inject(UserApiService);\n\n  getEvents(): Observable<CalendarEvent[]> {\n    return this.eventApiService.getFilteredEvents().pipe(\n      map(events => {\n        console.log('events', events)\n        return events.map(event => this.convertEventToCalendar(event))\n      }),\n    );\n  }\n\n  getUsersByIds(uids: string[]): Observable<ProfileDTO[]> {\n    return this.userApiService.getUsersInList(uids);\n  }\n\n  private convertEventToCalendar(event: ICalendarEvent): CalendarEvent {\n    return {\n      id: event.uid,\n      start: new Date(event.start_date.toMillis()),\n      end: event.end_date ? new Date(event.end_date.toMillis()) : undefined,\n      title: event.title,\n      color: colors[event.colors],\n      allDay: event.allDay,\n      cssClass: event.cssClass,\n      meta: {\n        ...event.meta,\n        teacher_uids: event.teacher_uids,\n      },\n    }\n  }\n}\n","import { formatDate } from '@angular/common';\nimport { Injectable, Inject, LOCALE_ID } from '@angular/core';\nimport { CalendarDateFormatter, CalendarEvent, CalendarEventTitleFormatter, DateFormatterParams } from 'angular-calendar';\n\n@Injectable()\nexport class DateFormatterService extends CalendarDateFormatter {\n  public override monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'EEEE', 'ru');\n  }\n\n  public override dayViewHour({ date, locale }: DateFormatterParams): string {\n    return formatDate(date, 'HH:mm', 'ru');\n  }\n\n  public override weekViewHour({ date, locale }: DateFormatterParams): string {\n    return this.dayViewHour({ date, locale: locale });\n  }\n}\n\n@Injectable()\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n  constructor(@Inject(LOCALE_ID) private locale: string) {\n    super();\n  }\n\n  // you can override any of the methods defined in the parent class\n\n  override month(event: CalendarEvent): string {\n    return `<b>${formatDate(event.start, 'HH:mm', this.locale)}</b> ${\n      event.title\n    }`;\n  }\n\n  override week(event: CalendarEvent): string {\n    return `<b>${formatDate(event.start, 'HH:mm', this.locale)}</b> ${\n      event.title\n    }`;\n  }\n\n  override day(event: CalendarEvent): string {\n    return `<b>${formatDate(event.start, 'HH:mm', this.locale)}</b> ${\n      event.title\n    }`;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CalendarView } from 'angular-calendar';\n\n@Component({\n  selector: 'app-calendar-header',\n  templateUrl: './calendar-header.component.html',\n  styleUrls: ['./calendar-header.component.scss'],\n})\nexport class CalendarHeaderComponent {\n  @Input() view!: CalendarView;\n\n  @Input() viewDate!: Date;\n\n  @Input() locale: string = 'ru';\n\n  @Output() viewChange = new EventEmitter<CalendarView>();\n\n  @Output() viewDateChange = new EventEmitter<Date>();\n\n  CalendarView = CalendarView;\n}\n","<div class=\"header\">\n  <div class=\"col-md-4\">\n    <div class=\"btn-group\">\n      <div class=\"btn btn-primary\" mwlCalendarPreviousView [view]=\"view\" [(viewDate)]=\"viewDate\"\n        (viewDateChange)=\"viewDateChange.next(viewDate)\">\n        <nb-icon icon=\"arrow-ios-back-outline\"></nb-icon>\n      </div>\n      <div class=\"btn btn-outline-secondary\" mwlCalendarToday [(viewDate)]=\"viewDate\"\n        (viewDateChange)=\"viewDateChange.next(viewDate)\">\n        Сегодня\n      </div>\n      <div class=\"btn btn-primary\" mwlCalendarNextView [view]=\"view\" [(viewDate)]=\"viewDate\"\n        (viewDateChange)=\"viewDateChange.next(viewDate)\">\n        <nb-icon icon=\"arrow-ios-forward-outline\"></nb-icon>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-4\">\n    <h3>{{ viewDate | calendarDate: view + 'ViewTitle' }}</h3>\n  </div>\n  <div class=\"col-md-4\">\n  </div>\n</div>\n","<nb-layout>\n  <nb-layout-column>\n    <nb-card>\n      <nb-card-header>\n        <nb-select class=\"desktop\" name=\"view\" [selected]=\"view\" (selectedChange)=\"selectView($event)\">\n          <nb-option *ngFor=\"let option of calendarViewOptions\" [value]=\"option\">{{ option }}</nb-option>\n        </nb-select>\n      </nb-card-header>\n      <nb-card-body [ngSwitch]=\"view\">\n        <app-calendar-header [(view)]=\"view\" [(viewDate)]=\"viewDate\">\n        </app-calendar-header>\n        <mwl-calendar-month-view *ngSwitchCase=\"'month'\" precision=\"minutes\" [viewDate]=\"viewDate\"\n          [activeDayIsOpen]=\"activeDayIsOpen\" [events]=\"(events$ | async) || []\" (dayClicked)=\"dayClicked($event.day)\"\n          (eventClicked)=\"openDialog(showInfo, $event.event)\">\n        </mwl-calendar-month-view>\n        <mwl-calendar-week-view *ngSwitchCase=\"'week'\" precision=\"minutes\" [viewDate]=\"viewDate\"\n          [events]=\"(events$ | async) || []\" (eventClicked)=\"openDialog(showInfo, $event.event)\">\n        </mwl-calendar-week-view>\n        <mwl-calendar-day-view *ngSwitchCase=\"'day'\" precision=\"minutes\" [viewDate]=\"viewDate\"\n          [events]=\"(events$ | async) || []\" (eventClicked)=\"openDialog(showInfo, $event.event)\">\n        </mwl-calendar-day-view>\n      </nb-card-body>\n    </nb-card>\n\n    <ng-template #showInfo let-data let-ref=\"dialogRef\">\n      <nb-card>\n        <nb-card-header>Информация</nb-card-header>\n        <nb-card-body>\n          <nb-list>\n            <nb-list-item>\n              <div class=\"title\">Название:</div>\n              <div class=\"value\">{{ data.title }}</div>\n            </nb-list-item>\n            <nb-list-item *ngIf=\"data.meta.teacher_uids\">\n              <div class=\"title\">Преподаватели:</div>\n              <div class=\"value\">\n                <div *ngFor=\"let uid of data.meta.teacher_uids\">\n                  <span *ngIf=\"uid | user | async as user\">{{ user?.first_name }} {{ user?.last_name }} </span>\n                </div>\n              </div>\n            </nb-list-item>\n            <nb-list-item>\n              <div class=\"title\">Начало:</div>\n              <div class=\"value\">{{ data.start | date: 'dd.MM.yyyy HH:mm' }}</div>\n            </nb-list-item>\n            <nb-list-item *ngIf=\"data.end\">\n              <div class=\"title\">Окончание:</div>\n              <div class=\"value\">{{ data.end | date: 'dd.MM.yyyy HH:mm' }}</div>\n            </nb-list-item>\n          </nb-list>\n        </nb-card-body>\n      </nb-card>\n    </ng-template>\n  </nb-layout-column>\n</nb-layout>\n","import { Component, HostListener, OnInit, TemplateRef, inject } from '@angular/core';\nimport { CalendarDateFormatter, CalendarEvent, CalendarEventTitleFormatter, CalendarView } from 'angular-calendar';\nimport { CalendarService } from '../../services/calendar.service';\nimport { CustomEventTitleFormatter, DateFormatterService } from '../../services/date-formatter.service';\nimport { Observable } from 'rxjs';\nimport { NbDialogRef, NbDialogService, NbToastrService } from '@nebular/theme';\nimport { isSameDay, isSameMonth } from 'date-fns';\n\n@Component({\n  selector: 'app-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss'],\n  providers: [\n    {\n      provide: CalendarDateFormatter,\n      useClass: DateFormatterService,\n    },\n    {\n      provide: CalendarEventTitleFormatter,\n      useClass: CustomEventTitleFormatter,\n    },\n  ]\n})\nexport class CalendarComponent implements OnInit {\n  private calendarService = inject(CalendarService);\n  private dialogService = inject(NbDialogService);\n  private toastr = inject(NbToastrService);\n\n  private ref!: NbDialogRef<any>;\n  loading = false;\n  activeDayIsOpen = true;\n\n  CalendarView = CalendarView;\n  calendarViewOptions = Object.values(CalendarView);\n\n  viewDate: Date = new Date();\n  view: CalendarView = CalendarView.Month;\n\n  events$!: Observable<CalendarEvent[]>;\n  selectedEvent!: CalendarEvent;\n\n\n  @HostListener('window:resize', ['$event']) calculateRows() {\n    if (window.innerWidth < 768) {\n      this.view = CalendarView.Day;\n    }\n  }\n\n  ngOnInit(): void {\n    this.calculateRows();\n    this.getData();\n  }\n\n  getData() {\n    this.events$ = this.calendarService.getEvents();\n  }\n\n  selectView(event: CalendarView) {\n    this.view = event;\n  }\n\n  openDialog(dialog: TemplateRef<any>, context?: any) {\n    this.ref = this.dialogService.open(dialog, {\n      context,\n    });\n  }\n\n  dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\n    if (isSameMonth(date, this.viewDate)) {\n      if (\n        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n        events.length === 0\n      ) {\n        this.activeDayIsOpen = false;\n      } else {\n        this.activeDayIsOpen = true;\n      }\n      this.viewDate = date;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CalendarComponent } from './containers/calendar/calendar.component';\nimport { RouterModule } from '@angular/router';\nimport { CalendarModule } from 'angular-calendar';\nimport { NbButtonModule, NbCardModule, NbCheckboxModule, NbDatepickerModule, NbIconModule, NbInputModule, NbLayoutModule, NbListModule, NbSelectModule } from '@nebular/theme';\nimport { CalendarHeaderComponent } from './components/calendar-header/calendar-header.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '../shared/shared.module';\n\n\n\n@NgModule({\n  declarations: [\n    CalendarComponent,\n    CalendarHeaderComponent,\n  ],\n  imports: [\n    CommonModule,\n    CalendarModule,\n    NbLayoutModule,\n    NbCardModule,\n    NbButtonModule,\n    NbSelectModule,\n    NbIconModule,\n    NbListModule,\n    NbIconModule,\n    SharedModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: CalendarComponent,\n        data: {\n          title: 'Расписание',\n        }\n      },\n    ]),\n  ]\n})\nexport class AppCalendarModule { }\n"],"x_google_ignoreList":[]}